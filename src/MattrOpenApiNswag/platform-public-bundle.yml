openapi: 3.0.2
info:
  title: Platform Core API
  version: v1.0.1
  description: |
    # Introduction
    The Platform Core API defines a set of capabilities that can be used to manage a tenant of the MATTR Platform.

    The API can be used to manage Decentralised Identifiers, issue Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs.

    ## API Reference Versioning
    A previous version of the API Reference can be [accessed here](/api-ref-previous).

    # Pagination
    Most list operations in the API use pagination that can be controlled by a cursor method using the `cursor` and `limit` query parameters.

    **Example on [Retrieve List of Credentials](#operation/retrieveListCreds)**
    ```
    GET https://tenant.vii.mattr.global/core/v1/credentials
    ?limit=100
    &cursor=Y3JlYXRlZEF0PTIwMjAtMTAtMDhUMjMlM0ExMyUzQTE3Ljg5NtZGUxZWEyNzQ4MWI4
    ```

    * The `nextCursor` is found at the start of each returned range of credential entries and identifies the last object in the list.
    * The `limit` determines how many entries are returned in that request, with a maximum value of 1000.

    Requesting a page after the last value in the list will return an empty `data` object.

    ``` json
    {
    "data": []
    }
    ```

    Not using a query parameter defaults the response to return the first range of credential entries with a limit of 100.


    # Authorization
    Access to the API is granted by our authorization provider, as part of onboarding you will be provided with client credentials to make a call to the auth provider and receive a bearer token.
    This token is then used in an `authorization` header on all calls idenitfied as requiring `bearerAuth` (this is required for the majorty of management operations).

    <SecurityDefinitions />
  contact:
    email: support@mattr.global
tags:
  - name: Security
  - name: DIDs
  - name: Credentials
  - name: Revocation
  - name: Presentations
  - name: Messaging
  - name: OIDC Issuer Auth
  - name: OIDC Issuers
  - name: OIDC Issuer Client
  - name: OIDC Verifier Auth
  - name: OIDC Verifiers
  - name: OIDC Verifier Client
x-tagGroups:
  - name: Access
    tags:
      - Security
  - name: Platform Core
    tags:
      - DIDs
      - Credentials
      - Revocation
      - Presentations
      - Messaging
  - name: OIDC Bridge
    tags:
      - OIDC Issuer Auth
      - OIDC Issuers
      - OIDC Issuer Client
      - OIDC Verifier Auth
      - OIDC Verifiers
      - OIDC Verifier Client
security:
  - bearerAuth: []
paths:
  /.well-known/did-configuration:
    get:
      security: []
      tags:
        - DIDs
      summary: Well known DID configuration
      description: |
        Returns a list of Decentralized Identifier (DID) Configuration entries from the tenant.

        See https://identity.foundation/.well-known/resources/did-configuration/

        These entries are automatically configured for **all** DIDs created by the tenant and is used for any party wanting to establish the relationship between domain ownership and the DIDs by exposing cryptographic proofs.

        This endpoint is unprotected, public facing and can be determinisically found at the root of the tenant subdomian or alias by any party wishing to discover the domain to DID relationship.
      responses:
        '200':
          description: List of DID Configuration entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dids.v1_GetDidConfigJsonldResponse'
              examples:
                Example:
                  value:
                    entries:
                      - '@context':
                          - 'https://www.w3.org/2018/credentials/v1'
                          - 'https://identity.foundation/.well-known/contexts/did-configuration-v0.0.jsonld'
                        type:
                          - VerifiableCredential
                          - DomainLinkageCredential
                        issuer: 'did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5'
                        issuanceDate: '2020-11-01T21:33:38.398Z'
                        credentialSubject:
                          id: 'did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5'
                          origin: tenant.vii.mattr.global
                        proof:
                          jws: eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..sOuFZV7lrUdxzOaRrCYoD9bbgxp3oEX1fceFFwxekjvJBzbI_ZzKL8-vPWOoFY200KTPwLYcEPhto0GQfM0iDg
                          type: Ed25519Signature2018
                          created: '2020-11-01T21:33:38Z'
                          proofPurpose: assertionMethod
                          verificationMethod: 'did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5'
                      - '@context':
                          - 'https://www.w3.org/2018/credentials/v1'
                          - 'https://w3c-ccg.github.io/ldp-bbs2020/context/v1'
                          - 'https://identity.foundation/.well-known/contexts/did-configuration-v0.0.jsonld'
                        type:
                          - VerifiableCredential
                          - DomainLinkageCredential
                        issuer: 'did:key:zUC7KmMGXt7fs9URk9EDqWLfpCjVTtfFMexViLLkPPUfm9j4heqvk9JkLarva3sP54FGjFNLpwc63ZTef2aR2cPssFbyDj75kopYqWL16j7JigA2BAvJcwnaKvKPUybxbroRg1v'
                        issuanceDate: '2020-11-01T21:33:38.427Z'
                        credentialSubject:
                          id: 'did:key:zUC7KmMGXt7fs9URk9EDqWLfpCjVTtfFMexViLLkPPUfm9j4heqvk9JkLarva3sP54FGjFNLpwc63ZTef2aR2cPssFbyDj75kopYqWL16j7JigA2BAvJcwnaKvKPUybxbroRg1v'
                          origin: product-team.platform.staging.mattrlabs.io
                        proof:
                          type: BbsBlsSignature2020
                          created: '2020-11-01T21:33:38Z'
                          proofValue: itoN9nPf6ut0/IxkNp+qesJOju9hV1BYxFMkP4VynqUxFalmQV4PQ6wJhqz5KJppC39+VL+19CxVjPXUXaIDVGRs7WPDGbLaGeViu1Mm4nZCgJbptdw8HOkkpZZ21SCaTN+bok2IG5XRH+QsBWH/cA==
                          proofPurpose: assertionMethod
                          verificationMethod: 'did:key:zUC7KmMGXt7fs9URk9EDqWLfpCjVTtfFMexViLLkPPUfm9j4heqvk9JkLarva3sP54FGjFNLpwc63ZTef2aR2cPssFbyDj75kopYqWL16j7JigA2BAvJcwnaKvKPUybxbroRg1v#zUC75v2eWSVhTC9XtyYci1cdrHNze4Wwzgv92GUDXeYQEkfZuu2CavRBVFkk9mnpToxiUMacjgYAx9JBmuoJXWc7YCRDDjTD5ocunta9DJrdmgCdAmuFCUfBPTo4GAnTY7x4582'
      operationId: wellKnownDidConfig
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/.well-known/did-configuration \
              --header 'Accept: application/json'
  '/v1/dids/{id}':
    get:
      tags:
        - DIDs
      summary: Resolve a DID
      description: |-
        Resolves the DID provided in the path to its DID Document from the DID method and method identifier. The DID Document may contain cryptographic material like a public key and service endpoints.

        Example:

        `did:sov:1234556` -  will be referenced on the Sovrin network
        `did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9` - the public key is encapsulated in the DID

        #### Returns

        The DID Document is returned along with meta-data already held about the DID by the tenant;
        - Registration Status: Given there can be a lag in writing on-ledger DIDs this status will be updated over a short timeframe (usually within 10 minutes).
        - Registered: Timestamp of registration.
        - Keys: A reference to the Keys in a KMS
      responses:
        '200':
          description: A DID Document and meta-data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dids.v1_GetDidResponse'
              examples:
                'Example did:key':
                  value:
                    didDocument:
                      '@context': 'https://w3.org/ns/did/v1'
                      id: 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9'
                      publicKey:
                        - id: 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9#z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9'
                          type: Ed25519VerificationKey2018
                          controller: 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9'
                          publicKeyBase58: 6Prt5jwEFEDtz1sPwQSdqNH6Nf5fy87dpPg23CGWPanm
                      authentication:
                        - 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9#z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9'
                      assertionMethod:
                        - 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9#z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9'
                      capabilityDelegation:
                        - 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9#z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9'
                      capabilityInvocation:
                        - 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9#z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9'
                      keyAgreement:
                        - id: 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9#z6LSo9fse5qkJjkZTSHRP69mvEw381Tww3umcjXaXQ7Zz71G'
                          type: X25519KeyAgreementKey2019
                          controller: 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9'
                          publicKeyBase58: CUVi7n2tDH2pN3uerSdpbeiZGrvqESjcjkou2wU3GjEW
                    registrationStatus: COMPLETED
                    localMetadata:
                      keys:
                        - kmsKeyId: 6Prt5jwEFEDtz1sPwQSdqNH6Nf5fy87dpPg23CGWPanm
                          didDocumentKeyId: 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9#z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9'
                      registered: 1588562204304
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                '404':
                  value:
                    code: NotFound
                    message: Resource Not Found
      operationId: resolveDid
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/core/v1/dids/did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9 \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
    delete:
      description: Delete a DID
      tags:
        - DIDs
      summary: Delete a DID
      responses:
        '204':
          description: DID successfully deleted
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                '404':
                  value:
                    code: NotFound
                    message: Resource Not Found
      operationId: deleteDid
      x-codeSamples:
        - lang: curl
          source: |
            curl --request DELETE \
              --url https://tenant.vii.mattr.global/core/v1/dids/did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9 \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
    parameters:
      - $ref: '#/components/parameters/Did'
  /v1/dids:
    get:
      tags:
        - DIDs
      summary: Retrieve a list of DIDs
      parameters:
        - $ref: '#/components/parameters/Common_Limit'
        - $ref: '#/components/parameters/Common_Cursor'
      description: |
        Returns a list of all DIDs (Decentralized Identifiers) managed by the tenant and their associated meta-data.
      responses:
        '200':
          description: A list of DIDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dids.v1_GetDidsResponse'
              examples:
                Example:
                  value:
                    nextCursor: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    data:
                      - did: 'did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5'
                        localMetadata:
                          keys:
                            - kmsKeyId: 5jFLoKmMPgqWaV1Ler5yaECr6XjDX6DPymZhYpVnLDVh
                              didDocumentKeyId: 'did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5#z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5'
                          registered: 1586312761694
                      - did: 'did:key:z6Mkg7FkYxUpSKBEUJMeG91A9vz66GfWxB4m9Lq81AMZ7wNT'
                        localMetadata:
                          keys:
                            - kmsKeyId: 2ezhxiEP6mgmMoWwaa3KJqS6GhPfYHpQTKvCAtPYCib5
                              didDocumentKeyId: 'did:key:z6Mkg7FkYxUpSKBEUJMeG91A9vz66GfWxB4m9Lq81AMZ7wNT#z6Mkg7FkYxUpSKBEUJMeG91A9vz66GfWxB4m9Lq81AMZ7wNT'
                          registered: 1586841097944
      operationId: retrieveListOfDids
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/core/v1/dids \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
    post:
      tags:
        - DIDs
      summary: Create a DID
      description: |-
        Takes a supported DID Method and generates keys and associated information for a new DID and registers the DID Document if applicable.

        Methods supported:
        - key
        - web
        - sov

        > During a trial any did:sov DIDs will not reside on the Sovrin MainNet, and when migrating to the MainNet any sov DIDs will be removed. Any did:sov DIDs created using this endpoint should be considered as experimental as well as any credentials created using them.

        #### Creating did:key
        A DID with a DID method of key can be created as follows.

        * `{"method": "key", "options": {"keyType": "ed25519"}}`
        * `{"method": "key", "options": {"keyType": "bls12381g2"}}`

        If no options are provided, a DID will be created with an ed25519 key type.

        If the key type in options is set to `bls12381g2` a DID will be created with a BLS key type which supports BBS+ signatures for issuing ZKP-enabled credentials.
        > A DID created with an experimental `bls12381g2` key type can only be used for issuing credentials.

        #### Creating did:web
        A DID with a DID method of web can be created as follows.

        * `{"method": "web", "options": {"domain": "mattr.global"}}`

        The returned initial DID Document then needs to be hosted so that it is accessible from the domain provided in the options, e.g. https://mattr.global/.well-known/did.json.

        When the DID Document is not available for download from the domain, the Registration Status of the DID is PROCESSING.

        Once the DID Document can be downloaded from the domain, the Registration Status will be COMPLETED.

        Note that the tenant will be able to prove ownership of the keys associated with the did:web DID Document through the well-known endpoint, i.e. https://tenant.vii.mattr.global/.well-known/did-configuration, while the DID Document hosted on the domain links the DID to a domain.

        #### Creating did:sov
        A DID with a DID method of sov can be created as follows.

        * `{"method": "sov"}`

        The Registration Status of the DID is updated over a short timeframe due to the lag incurred in registering the DID Document, which may take up to 10 minutes.
        >  During a trial DID Documents are anchored on a private Indy pool not the Sovrin MainNet. Please [contact us](https://mattr.global/contact/) to discuss further options.

        #### Returns
        The DID, associated metadata and registration status.

        Unsupported Methods result in a 400 response with an "Invalid value" message.
      requestBody:
        description: Options for creating the decentralized identifier
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dids.v1_CreateDidDocument'
            examples:
              'Create did:key':
                value:
                  method: key
                  options:
                    keyType: ed25519
      responses:
        '201':
          description: DID document created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dids.v1_CreateDidResponse'
              examples:
                'did:key':
                  value:
                    did: 'did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq'
                    registrationStatus: COMPLETED
                    localMetadata:
                      keys:
                        - kmsKeyId: D6EjPbBioWJb4WSEYrPHuUrDXbCTkNEfmB91p8MdkvVT
                          didDocumentKeyId: 'did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq#z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq'
                      registered: 1588741969938
                      initialDidDocument:
                        '@context': 'https://w3.org/ns/did/v1'
                        id: 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9'
                        publicKey:
                          - id: 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9#z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9'
                            type: Ed25519VerificationKey2018
                            controller: 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9'
                            publicKeyBase58: 6Prt5jwEFEDtz1sPwQSdqNH6Nf5fy87dpPg23CGWPanm
                        authentication:
                          - 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9#z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9'
                        assertionMethod:
                          - 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9#z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9'
                        capabilityDelegation:
                          - 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9#z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9'
                        capabilityInvocation:
                          - 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9#z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9'
                        keyAgreement:
                          - id: 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9#z6LSo9fse5qkJjkZTSHRP69mvEw381Tww3umcjXaXQ7Zz71G'
                            type: X25519KeyAgreementKey2019
                            controller: 'did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9'
                            publicKeyBase58: CUVi7n2tDH2pN3uerSdpbeiZGrvqESjcjkou2wU3GjEW
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Unsupported method:
                  value:
                    code: BadRequest
                    message: Bad Request
                    details:
                      - value: xxx
                        msg: Invalid value
                        param: method
                        location: body
      operationId: createDid
      x-codeSamples:
        - lang: curl
          source: |
            curl --request POST \
              --url https://tenant.vii.mattr.global/core/v1/dids \
              --header 'Accept: application/json' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN' \
              --data '{   "method":"key",
                          "options": {
                              "keyType":"ed25519"
                          }
                      }'
  /v1/credentials:
    post:
      tags:
        - Credentials
      summary: Create a verifiable credential
      requestBody:
        description: The credential payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials.v1_CreateCredentialRequest'
            examples:
              Create a Credential:
                value:
                  '@context':
                    - 'https://www.w3.org/2018/credentials/v1'
                    - 'https://schema.org'
                  subjectId: 'did:key:z6Mkvji7zrwyFATXUzGNBSCnrPaZy7H3BWUnihrHvZdkEd9y'
                  type:
                    - VerifiableCredential
                    - AlumniCredential
                  claims:
                    givenName: Jamie
                    familyName: Doe
                    alumniOf: Example University
                  issuer:
                    id: 'did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5'
                    name: Example University
                  persist: true
                  tag: identifier123
                  revocable: true
      responses:
        '201':
          description: Credential created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credentials.v1_CreateCredentialResponse'
        '400':
          description: 'Bad request, Invalid request body'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      description: |
        Creates a Verifiable Credential (VC or just Credential) in a JSON-LD format adhering to the [W3C VC Data Model spec]( https://www.w3.org/TR/vc-data-model/).


        **Creating the Payload:**

        The values required by the operation are validated where available and used to construct the Verifiable Credential.

        The Credential is issued using JSON-LD with linked data proofs, the `type` values of the Credential and the Subject Claims must be represented by a schema in `@context`.
        > The schema `https://www3.org/2018/credentials/v1` is always required in addition any `@context` values, so that the Credential can be referenced.

        > The `type` value of `VerifiableCredential` must be used as the *first* value in the array to conform to the [W3C VC Data Model spec]( https://www.w3.org/TR/vc-data-model/).

        **Subject Identifiers**

        In general, the Subject identifier in the `subjectId` field should have been authentically bound to the subject and authenticated against the information used in the claims, for example by using an OpenID Connect authentication flow or another mechanism including out-of-band processes.

        Credentials may be issued without subject identifiers, this covers uses-cases, where the credential cannot or does not need to be adequately bound to a Subject DID and may be treated as a bearer credential or reissued at a later time once the credential can be bound.

        **ZKP-enabled BBS+ credential:**

        If you wish to issue a ZKP-enabled Verifiable Credential, the provided `issuer` `id` must be a did:key with a key type of bls12381g2. The platform will automatically detect this capability and issue a ZKP-enabled BBS+ credential. Note that the schema `https://w3c-ccg.github.io/ldp-bbs2020/context/v1` will automatically be added to the `@context` in the credential.

        > During Preview this feature is experimental. It may change over time and may require credentials to be reissued.

        **Credential meta-data:**

        Setting the `persist` value to `true` will store the entire credential contents as well as the meta-data on the platform. If set to `false` only the credential meta-data is held on the platform:
        - `id`
        - `tag` (optional)
        - `credentialStatus` (optional)
        - `issuanceDate`

        The optional `tag` value can be used to externally reference the issued credential.

        #### Returns
        On success, the Verifiable Credential is always provided in the response along with meta-data.
        Subject bound credential should be delivered to the intended subject.
      operationId: createCredential
      x-codeSamples:
        - lang: curl
          source: |
            curl --request POST \
              --url https://tenant.vii.mattr.global/core/v1/credentials \
              --header 'Accept: application/json' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN' \
              --data '{"@context":["https://www.w3.org/2018/credentials/examples/v1" , "https://www.w3.org/2018/credentials/v1"],
                       "subjectId":"did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5",
                       "type":["AlumniCredential"],
                       "claims":{"givenName":"Jamie",
                                 "familyName":"Doe",
                                 "alumniOf":"Example University"},
                       "issuer":{"id":"did:key:z6Mkg7FkYxUpSKBEUJMeG91A9vz66GfWxB4m9Lq81AMZ7wNT",
                                 "name":"Example University"},
                       "persist":true,
                       "revocable":true
                      }'
    get:
      tags:
        - Credentials
      summary: Retrieve list of credential data
      parameters:
        - schema:
            type: string
            example: identifier123
          in: query
          name: tag
          description: The optional external reference to filter on
        - schema:
            type: string
            example: AlumniCredential
          in: query
          name: type
          description: The optional credential type to filter on
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
          in: query
          name: limit
          description: 'Range size of returned credential entries, default 100'
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the range of credential entries
      responses:
        '200':
          description: Returns a page of credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credentials.v1_GetCredentialsResponse'
              examples:
                List of credential data:
                  value:
                    nextCursor: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    data:
                      - id: 873277c0-a162-11ea-8a1d-a111119347e6
                        credential:
                          '@context':
                            - 'https://www.w3.org/2018/credentials/v1'
                            - 'https://schema.org'
                          type:
                            - VerifiableCredential
                            - AlumniCredential
                          issuer:
                            id: 'did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5'
                            name: 'https://tenant.vii.mattr.global'
                          issuanceDate: '2020-05-02T12:06:29.156Z'
                          credentialSubject:
                            id: 'did:key:z6Mkvji7zrwyFATXUzGNBSCnrPaZy7H3BWUnihrHvZdkEd9y'
                            givenName: Jamie
                            familyName: Doe
                          proof:
                            type: Ed25519Signature2018
                            created: '2020-05-02T12:06:29Z'
                            jws: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                            proofPurpose: assertionMethod
                            verificationMethod: 'did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5#z6Mkvji7zrwyFATXUzGNBSCnrPaZy7H3BWUnihrHvZdkEd9y'
                        tag: identifier123
                        issuanceDate: '2020-05-02T12:06:29.156Z'
                      - id: 9043aa74-eb08-11ea-adc1-0242ac120002
                        tag: identifier124
                        credentialStatus:
                          id: 'https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1'
                          type: RevocationList2020Status
                          revocationListCredential: 'https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3'
                          revocationListIndex: 1
                        issuanceDate: '2020-10-06T03:21:02.397Z'
        '400':
          description: Bad query parameters in request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Cursor not found:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: xxxx
                        msg: id and createdAt is missing
                        param: cursor
                        location: query
                Limit exceeded:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: '1001'
                        msg: Invalid value
                        param: limit
                        location: query
      operationId: retrieveListCreds
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/core/v1/credentials \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
      description: |
        Returns a list of all credential data stored in the tenant.

        **In the list**

        Inside the `data` array, there is an body for each credential issued on the platform, in addition to the `id` the body will contain optionally added meta-data and may contain the entire credential contents if `persist` was invoked during credential creation.

        > Credentials issued via the OIDC Bridge are set not to be persisted.

        **Pagination**

        Pagination can be controlled by a cursor method using the `cursor`and `limit` query parameters. The `nextCursor` is found at the start of each returned range of credential entries and the `limit` determines how many entries are returned in that request, with a maximum value of `1000`.

        Not using a query parameter defaults the response to return the first range of credential entries with a limit of 100.

        > The optional `tag` filter or the Credential `type` can be used to retrieve credential data.
  '/v1/credentials/{id}':
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Credential ID
    get:
      tags:
        - Credentials
      summary: Retrieve credential data
      responses:
        '200':
          description: Credential returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credentials.v1_GetCredentialResponse'
              examples:
                With persisted credential:
                  value:
                    id: 873277c0-a162-11ea-8a1d-a111119347e6
                    credential:
                      '@context':
                        - 'https://www.w3.org/2018/credentials/v1'
                        - 'https://schema.org'
                      type:
                        - VerifiableCredential
                        - AlumniCredential
                      issuer:
                        id: 'did:issuer:abcdb1f712ebc6f1c276e12ec21'
                        name: 'https://tenant.vii.mattr.global'
                      issuanceDate: '2020-05-02T12:06:29.156Z'
                      credentialStatus:
                        id: 'https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1'
                        type: RevocationList2020Status
                        revocationListCredential: 'https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3'
                        revocationListIndex: 4
                      credentialSubject:
                        id: 'did:key:z6Mkvji7zrwyFATXUzGNBSCnrPaZy7H3BWUnihrHvZdkEd9y'
                        givenName: Jamie
                        familyName: Doe
                      proof:
                        type: Ed25519Signature2018
                        created: '2020-05-02T12:06:29Z'
                        jws: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                        proofPurpose: assertionMethod
                        verificationMethod: 'did:issuer:abcdb1f712ebc6f1c276e12ec21'
                    tag: identifier123
                    credentialStatus:
                      id: 'https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1'
                      type: RevocationList2020Status
                      revocationListCredential: 'https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3'
                      revocationListIndex: 4
                    issuanceDate: '2020-05-02T12:06:29.156Z'
                No persisted credential:
                  value:
                    id: 9043aa74-eb08-11ea-adc1-0242ac120002
                    tag: identifier124
                    issuanceDate: '2020-05-02T12:06:29.156Z'
        '400':
          description: Credential ID not in a UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: retrieveCredential
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/core/v1/credentials/873277c0-a162-11ea-8a1d-a111119347e6 \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
      description: |-
        Get data for a previously created credential using its ID.

        In addition to the `id` the body will contain optionally added meta-data and may contain the entire credential contents if `persist` was invoked during credential creation.

        > Credentials issued via the OIDC Bridge do not have their contents persisted.
    delete:
      tags:
        - Credentials
      summary: Remove credential data
      responses:
        '204':
          description: Credential deleted
        '400':
          description: Invalid id parameter format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Credential ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: removeCredential
      x-codeSamples:
        - lang: curl
          source: |
            curl --request DELETE \
              --url https://tenant.vii.mattr.global/core/v1/credentials/873277c0-a162-11ea-8a1d-a111119347e6 \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
      description: |-
        Remove all stored credential data from the tenant using its ID.

        > The entire entry including meta-data and the credential contents is removed from the system and cannot be recovered.
  /v1/credentials/verify:
    post:
      operationId: verify-credential
      tags:
        - Credentials
      summary: Verify a credential
      description: |-
        Send any JSON-LD Verifiable Credential that conforms to the [W3C Verifiable Credentials data model](https://www.w3.org/TR/vc-data-model/) to perform verification checks and return a response:
        - Issuer DID can be resolved
        - JSON-LD context is valid for subject claims
        - Proof is valid & the credential has not been tampered with
        - Is not in a revoked status on a RevocationList2020
        This endpoint can be used to check any Credential issued by any service provider.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials.v1_VerifyCredentialRequest'
      responses:
        '200':
          description: Credential has been processed
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  verified:
                    type: boolean
                  reason:
                    type: string
                    minLength: 1
                    example: Credential has been revoked
                    description: Reason for verification failure
                required:
                  - verified
              examples:
                Credential Pass:
                  value:
                    verified: true
                Credential Revoked:
                  value:
                    verified: false
                    reason: Credential has been revoked
      x-codeSamples:
        - lang: curl
          source: |
            curl --request POST \
              --url https://tenant.vii.mattr.global/core/v1/credentials/verify \
              --header 'Accept: application/json' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN' \
              --data '{
                        "credential": {
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            "https://schema.org"
                          ],
                          "type": [
                            "VerifiableCredential",
                            "Course"
                          ],
                          "issuer": {
                            "id": "did:key:z6MknFBDVf6bd9AU9EkRyHpVz2tQXdnYL1tbhCkFiRx1uCkh",
                            "name": "tenant"
                          },
                          "issuanceDate": "2020-11-30T02:56:46.133Z",
                          "credentialSubject": {
                            "id": "did:key:z6MkfxQU7dy8eKxyHpG267FV23agZQu9zmokd8BprepfHALi",
                            "givenName": "Chris",
                            "familyName": "Shin",
                            "educationalCredentialAwarded": "Certificate Name"
                          },
                          "proof": {
                            "type": "Ed25519Signature2018",
                            "created": "2020-11-30T02:56:46Z",
                            "jws": "eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..p98wThckxfBf5NWy6vjsctkWVXHZ9hfov-yW-g_HYoi2fBRh19iiYf5CiAYEaPiX9ePJl7aeyeyLlZ_wVdHxAw",
                            "proofPurpose": "assertionMethod",
                            "verificationMethod": "did:key:z6MknFBDVf6bd9AU9EkRyHpVz2tQXdnYL1tbhCkFiRx1uCkh#z6MknFBDVf6bd9AU9EkRyHpVz2tQXdnYL1tbhCkFiRx1uCkh"
                          }
                        }
                      }'
  '/v1/credentials/{id}/revocation-status':
    post:
      tags:
        - Revocation
      summary: Set credential revocation status
      description: |
        A credential can be revoked by setting the revocation status.
      requestBody:
        description: Setting the revocation status
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials.v1_SetRevocationStatus'
            examples:
              Example:
                value:
                  isRevoked: true
      responses:
        '200':
          description: The revocation status has been set
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Credential not revocable:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: path
                        msg: credential not revocable
                        param: id
                        value: a80a5e7e-1972-4be6-8a4e-2adf09badf24
                Credential does not exist:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: path
                        msg: not found
                        param: id
                        value: a80a5e7e-1972-4be6-8a4e-2adf09badf24
                Revocation list is not found:
                  value:
                    code: string
                    message: string
                    details:
                      - {}
      operationId: setRevocationStatus
      x-codeSamples:
        - lang: curl
          source: |
            curl --request POST \
              --url https://tenant.vii.mattr.global/core/v1/credentials/a80a5e7e-1972-4be6-8a4e-2adf09badf24/revocation-status \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN' \
              --data '{"isRevoked": true}'
    parameters:
      - schema:
          type: string
          format: uuid
          example: a80a5e7e-1972-4be6-8a4e-2adf09badf24
        name: id
        in: path
        required: true
        description: Credential ID
    get:
      tags:
        - Revocation
      summary: Retrieve credential revocation status
      responses:
        '200':
          description: Credential status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credentials.v1_RevocationStatusResponse'
              examples:
                Revocation Status:
                  value:
                    isRevoked: false
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Credential not revocable:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: path
                        msg: credential not revocable
                        param: id
                        value: a80a5e7e-1972-4be6-8a4e-2adf09badf24
                Credential does not exist:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: path
                        msg: not found
                        param: id
                        value: a80a5e7e-1972-4be6-8a4e-2adf09badf24
                Revocation list is not found:
                  value:
                    code: string
                    message: string
                    details:
                      - {}
      operationId: getRevocationStatus
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/core/v1/credentials/a80a5e7e-1972-4be6-8a4e-2adf09badf24/revocation-status \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
      description: |-
        Retrieve the revocation status of a certain credential.


        #### Returns
        The revocation status of the credential
  '/v1/revocation-lists/{id}':
    get:
      tags:
        - Revocation
      summary: Retrieve revocation list
      responses:
        '200':
          description: The revocation list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifiableCredential'
              examples:
                Revocation List:
                  value:
                    id: 'https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3'
                    '@context':
                      - 'https://www.w3.org/2018/credentials/v1'
                      - 'https://w3id.org/vc-revocation-list-2020/v1'
                    type:
                      - VerifiableCredential
                      - RevocationList2020Credential
                    issuer: 'did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5'
                    issuanceDate: '2020-05-02T12:06:29.156Z'
                    credentialSubject:
                      type: RevocationList2020
                      encodedList: H4sIAAAAAAAAA-3BMQEAAADCoPVPbQwfoAAAAAAAAAAAAAAAAAAAAIC3AYbSVKsAQAAA
                    proof:
                      type: Ed25519Signature2018
                      created: '2020-05-02T12:06:29Z'
                      jws: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                      proofPurpose: assertionMethod
                      verificationMethod: 'did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5#z6Mkvji7zrwyFATXUzGNBSCnrPaZy7H3BWUnihrHvZdkEd9y'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Revocation list is not found:
                  value:
                    code: NotFound
                    message: Resource Not Found
      operationId: retrieveRevocationList
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3 \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
      security: []
      description: |-
        Retrieve the revocation list that contains the revocation status of a number of credentials.


        #### Returns
        The revocation list
    parameters:
      - schema:
          type: string
          format: uuid
          example: cc641396-3750-43c8-b8b8-f30d74eb3fb3
        name: id
        in: path
        required: true
        description: Revocation list ID
  '/v1/credentials/{id}/revocation-status/notification':
    parameters:
      - $ref: '#/components/parameters/Id'
    post:
      summary: Create a revocation message payload
      operationId: createRevNotification
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                  type:
                    type: string
                    minLength: 1
                  to:
                    type: array
                    items:
                      required:
                        - string
                      properties: {}
                  from:
                    type: string
                    minLength: 1
                  created_time:
                    type: number
                  body:
                    type: object
                    properties:
                      revocationListCredential:
                        type: string
                        minLength: 1
                      revocationListIndex:
                        type: string
                        minLength: 1
                      isRevoked:
                        type: boolean
                    required:
                      - revocationListCredential
                      - revocationListIndex
                      - isRevoked
                required:
                  - id
                  - type
                  - to
                  - from
                  - created_time
                  - body
      description: |-
        Create a payload that can form a message in the JWM format that can be used in sending notifications to subjects based on the revocation status of their issued credentials.

        - Use a DID setup on the tenant as the `from` value, this should be a DID with a key type suitable for messaging (not a BLS key type)
        - Include a SubjectDID as the `to` value - this value is only used in the message construction, it should be the same value as the intended recipient.


        To send a notification to the Subject DID holder, use the payload with the /messaging/encrypt and /messaging/send endpoints.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePayloadRequest'
        description: Create a JWM message payload
      tags:
        - Revocation
  /v1/messaging/sign:
    post:
      tags:
        - Messaging
      summary: Sign a message
      requestBody:
        description: Sign message request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignMessageRequest'
      responses:
        '200':
          description: Message signed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignMessageResponse'
        '400':
          description: Error signing message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      description: |-
        Creates a signed message in the form of a JWS (JSON Web Signature) using the a specific Key from the DID (Decentralized Identifier) supplied in the request.

        `didUrl` must be a reference to a key that supports signing. 
        Use the `authentication` key value from the DID Document.

        ```
        {
          "didDocument": {
            "@context": "https://w3.org/ns/did/v1",
            "id": "did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5#z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5",
            "authentication": [
              "did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5#z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5#z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5#z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5"
            ]
          }}
        ```

        #### Returns

        A JWS in compact serialization form signed by the did supplied in the request
      operationId: signMessage
      x-codeSamples:
        - lang: curl
          source: |
            curl --request POST \
              --url https://tenant.vii.mattr.global/core/v1/messaging/sign \
              --header 'Accept: application/json' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN' \
              --data '{"didUrl":"did:example:12344#1", "payload": { "msg": "this is a payload"}}'
  /v1/messaging/verify:
    post:
      tags:
        - Messaging
      summary: Verify a message
      requestBody:
        description: JWS to verify
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyRequest'
            examples:
              Request:
                value:
                  jws: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      responses:
        '200':
          description: 'Verification has been performed, see response body for result'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyMessageResponse'
              examples:
                Verified:
                  value:
                    payload: payload
                    didUrl: 'did:key:z6Mkqh5teM4EiYkBVNPJiYhwMJ9D9MqdAi2RoNYGJspKdpWE#z6Mkqh5teM4EiYkBVNPJiYhwMJ9D9MqdAi2RoNYGJspKdpWE'
                    did: 'did:key:z6Mkqh5teM4EiYkBVNPJiYhwMJ9D9MqdAi2RoNYGJspKdpWE'
                    verified: true
                Verified false:
                  value:
                    payload: payload
                    didUrl: 'did:key:z6Mkqh5teM4EiYkBVNPJiYhwMJ9D9MqdAi2RoNYGJspKdpWE#z6Mkqh5teM4EiYkBVNPJiYhwMJ9D9MqdAi2RoNYGJspKdpWE'
                    did: 'did:key:z6Mkqh5teM4EiYkBVNPJiYhwMJ9D9MqdAi2RoNYGJspKdpWE'
                    verified: false
        '400':
          description: Invalid JWS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Verification failed:
                  value:
                    code: BadRequest
                    message: Verification failed
      description: |-
        Provide a signed payload in the form of a JWS (JSON Web Signature) that has been signed by a DID (Decentralized Identifier) and get a response indicating if the signature verification was successful and the DID that was used to originally sign the payload.

        One use case for verifying a JWS with a DID is when the Mobile Wallet App sends a Request Object to an OpenID Provider as part of the Authorization Code Flow (as per https://openid.net/specs/openid-connect-core-1_0-final.html#RequestObject). The Request Object is wrapped in a JWS with a signature that is generated from the Subject DID on the mobile app. Therefore verifying the JWS proves that the mobile app has access to the private key of the Subject DID.

        #### Returns

        Indicates if the JWS payload was untampered and that the signature is valid by verifying that the kid in the JWS header is the same as the `iss` value in the Request Object, which could for instance be the Subject DID.
        The DID used is returned as both the full `didUrl` including fragment pointer to the DID Document and the `did` which can be used for Credential creation.
      operationId: verifyJws
      x-codeSamples:
        - lang: curl
          source: |
            curl --request POST \
              --url https://tenant.vii.mattr.global/core/v1/messaging/verify \
              --header 'Accept: application/json' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN' \
              --data '{"jws":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3FoNXRlTTRFaVlrQlZOUEppWWh3TUo5RDlNcWRBaTJSb05ZR0pzcEtkcFdFI3o2TWtxaDV0ZU00RWlZa0JWTlBKaVlod01KOUQ5TXFkQWkyUm9OWUdKc3BLZHBXRSJ9.cGF5bG9hZA.ShzO4OlV3Db1Y3KUK5ww4PHB_wW2WF8LxE-pHUkbqDX3LUobaC9DF_72cJd8F3nRQCD8sRRXXoHMHuamB4_ZDg"}'
  /v1/messaging/encrypt:
    post:
      tags:
        - Messaging
      summary: Encrypt a message
      operationId: encryptMessage
      requestBody:
        description: Encryption params
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                senderDidUrl:
                  type: string
                recipientDidUrls:
                  type: array
                  items:
                    type: string
                payload:
                  type: object
              required:
                - senderDidUrl
                - recipientDidUrls
                - payload
            examples:
              Encrypt message:
                value:
                  senderDidUrl: 'did:key:z6Mko4PvuwKzmjtaKTEV6ZhMSYqX5myTSe3L3Md4feiwCoua#z6LSkKk8HK73jYfUQRBHX3Qeb1Agv39qVNFn7n2PjRvjpPcy'
                  recipientDidUrls:
                    - 'did:key:z6MkgmEkNM32vyFeMXcQA7AfQDznu47qHCZpy2AYH2Dtdu1d'
                    - 'did:key:z6MkgxxdrThaRd7HbeAA4pYEwAgKT6ZXy2aNTcPkmeF1yWHN'
                  payload:
                    id: 731961f2-bdc3-4f1e-8d59-cc308fd60ec8
                    type: 'https://mattr.global/schemas/verifiable-credential/offer/OidcCredentialProvider'
                    from: 'did:key:z6MkndAHigYrXNpape7jgaC7jHiWwxzB3chuKUGXJg2b5RSj'
                    created_time: '1616466734'
                    body:
                      uri: 'openid://discovery?issuer=https://tenant.vii.mattr.global/ext/oidc/v1/issuers/0dceeddd-f717-4bf2-b520-b3ddcd104a60'
      responses:
        '200':
          description: Message encrypted
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  jwe:
                    type: object
                    properties:
                      protected:
                        type: string
                        minLength: 1
                      recipients:
                        type: array
                        uniqueItems: true
                        minItems: 1
                        items:
                          required:
                            - encryption_key
                          properties:
                            header:
                              type: object
                              properties:
                                alg:
                                  type: string
                                  minLength: 1
                                kid:
                                  type: string
                                  minLength: 1
                                epk:
                                  type: object
                                  properties:
                                    kty:
                                      type: string
                                      minLength: 1
                                    crv:
                                      type: string
                                      minLength: 1
                                    x:
                                      type: string
                                      minLength: 1
                                  required:
                                    - kty
                                    - crv
                                    - x
                                skid:
                                  type: string
                                  minLength: 1
                              required:
                                - alg
                                - kid
                                - epk
                                - skid
                            encryption_key:
                              type: string
                              minLength: 1
                      ciphertext:
                        type: string
                        minLength: 1
                      iv:
                        type: string
                        minLength: 1
                      tag:
                        type: string
                        minLength: 1
                    required:
                      - protected
                      - recipients
                      - ciphertext
                      - iv
                      - tag
                required:
                  - jwe
              examples:
                Encrypted message:
                  value:
                    jwe:
                      protected: eyJhbGciOiJYQzIwUCJ9
                      recipients:
                        - header:
                            alg: ECDH-1PU+A256KW
                            kid: 'did:key:z6MkgmEkNM32vyFeMXcQA7AfQDznu47qHCZpy2AYH2Dtdu1d#z6LSsvqSJkBvVEsDC8cxMHuQ3sKoLRMXB1MdtoLrMUq6A8Rg'
                            epk:
                              kty: OKP
                              crv: x25519
                              x: JOLnYaD7L-Rszz7fczPhn6MkNre25PUsztzB1RHoz14
                            skid: 'did:key:z6MkreuqFq6WrwozTeGKuUDz8bniTFRNAg8f3ZB862YdLp7v#z6LScyz3YLToyoKwZE6Tfq65hgZUkZdHrC4ZqohcUH9X6Twx'
                          encryption_key: ag5iKzjJOth9Wa68dCVKJW_vnO_Ga0zSJgQp5rIUg69HCzIjuNYhDg
                        - header:
                            alg: ECDH-1PU+A256KW
                            kid: 'did:key:z6MkgxxdrThaRd7HbeAA4pYEwAgKT6ZXy2aNTcPkmeF1yWHN#z6LSgDiT1CkducmcSPaq9E1Uj1qdSXBjsUNqqLQLrUu8EHWd'
                            epk:
                              kty: OKP
                              crv: x25519
                              x: gDYW7rhG3cBqFp9trFETtlut6QJxYVVSoVWL7eN1bzE
                            skid: 'did:key:z6MkreuqFq6WrwozTeGKuUDz8bniTFRNAg8f3ZB862YdLp7v#z6LScyz3YLToyoKwZE6Tfq65hgZUkZdHrC4ZqohcUH9X6Twx'
                          encryption_key: F5R5ZW7Yk7_iWT5kUWqv3w_tLI7V86tLRthjy_SSbGQ2pFyXKni_gA
                      ciphertext: xpW-D6sDPpWc_jk87nEyxPX7JQV8_OZpaQft7ySQ5XmNhoj-lQyDkXDncOCyhB7yMSdZrRBNQjKxlEbpY_WLk1hBoWfsTeszVSAuFbX_VKUSJ7GR6rcnWGVNgDfKS8GsyC_owtswXatkF_65_mzFOygctkUmd2eI5bcpQpWjhw2vqnvnWkb7l2J27aWFF_c9cu52dB559j8lwLYyYC9oSMgV5piB6ppfrWBGo_DigjxvJcAYcjFYqFcT6A1nphPhwVTQ2HNfJodbQoseHub8UQdG4qAOcggq5DI84tbqor1SU9rdPH03jPkLgoO_aeXyJg5meITXoFSiu_tRfvf8QQ6vKq6pkTTXs8zKXcBCGhGIyKBNBG4R4RIY1UffTMnJQQQGBble3P06pGOnsnSop0BtygelB9M0ZEwnAUSAQqN1RR4AQwWcn9nH6hHEu1pMhSvhCuFNAPWS-hg24JGGw8Xe3EEZlLH0PM8qpUAfksPq
                      iv: FJq5zKvuPiUQIdRcMtiChHCJByuY8XK9
                      tag: u8kT0VAAtTswjGXxNpuX0g==
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Sender DID not found:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Resource Not Found
                        param: senderDidUrl
                        value: 'did:key:z6MkopLiuMudqeRm1KvQ24jyUfn6pciePNomKqpsiMgeg4nT#z6LSmWEcPwNbxCgbuSMGTz1Gddnf9MsVSMJCfgPtksgThLvi'
      description: |
        Encrypts a payload using a JWM format.

        The `senderDidUrl` must be a reference to a key that supports key agreement. 
        Use the `id` value from the `keyAgreement` list in the DID Document.

        ```
        "keyAgreement": [
                {
                  "id": "did:key:z6Mko4PvuwKzmjtaKTEV6ZhMSYqX5myTSe3L3Md4feiwCoua#z6LSkKk8HK73jYfUQRBHX3Qeb1Agv39qVNFn7n2PjRvjpPcy",
                  "type": "X25519KeyAgreementKey2019",
                  "controller": "did:key:z6Mko4PvuwKzmjtaKTEV6ZhMSYqX5myTSe3L3Md4feiwCoua",
                  "publicKeyBase58": "9eZxm1JBe5wjK2oWzPthGQxD4tcinm5dEoJiEyHD71rD"
                  }
              ]
        ```

        ### Returns
  /v1/messaging/decrypt:
    post:
      tags:
        - Messaging
      summary: Decrypt a message
      operationId: decryptMessage
      requestBody:
        description: Decryption params
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jwe:
                  type: string
              required:
                - jwe
      responses:
        '200':
          description: Message Decrypted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecryptMessageResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Recipient DID not found:
                  value:
                    code: BadRequest
                    message: Validation Error
      description: Decrypt a message where the tenant manages the Keys for the `recipientDidUrl`
  /v1/messaging/send:
    post:
      summary: Send a message
      operationId: sendMessage
      description: |-
        Send an ecrypted JWM format DIDComm message to a DID service endpoint.

        In order to successfully route messages to their intended recipients the endpoint will resolve a public DID Document and look-up the service endpoint.

        This endpoint only accepts Encrypted JWM payloads to ensure that messages sent for recipients are encrypted-at-rest whilst in messaging inboxes. 
        The JWM should be encrypted for the recipient based on a key available in the DID Document.
      tags:
        - Messaging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
            examples:
              Send message:
                value:
                  to: 'did:key:z6MkgmEkNM32vyFeMXcQA7AfQDznu47qHCZpy2AYH2Dtdu1d'
                  message:
                    protected: eyJhbGciOiJYQzIwUCJ9
                    recipients:
                      - header:
                          alg: ECDH-1PU+A256KW
                          kid: 'did:key:z6MkgmEkNM32vyFeMXcQA7AfQDznu47qHCZpy2AYH2Dtdu1d#z6LSsvqSJkBvVEsDC8cxMHuQ3sKoLRMXB1MdtoLrMUq6A8Rg'
                          epk:
                            kty: OKP
                            crv: x25519
                            x: kYsO02jWHATTJel6OpePqlkdDmKlE5VOr18UblgL8W0
                          skid: 'did:key:z6Mko4PvuwKzmjtaKTEV6ZhMSYqX5myTSe3L3Md4feiwCoua#z6LSkKk8HK73jYfUQRBHX3Qeb1Agv39qVNFn7n2PjRvjpPcy'
                        encryption_key: n1VUf5SQdSFNtb8DHzYfJJ_lFhJcGDAPJWG8Y1W3d2qYyPzyxMhyaA
                      - header:
                          alg: ECDH-1PU+A256KW
                          kid: 'did:key:z6MkgxxdrThaRd7HbeAA4pYEwAgKT6ZXy2aNTcPkmeF1yWHN#z6LSgDiT1CkducmcSPaq9E1Uj1qdSXBjsUNqqLQLrUu8EHWd'
                          epk:
                            kty: OKP
                            crv: x25519
                            x: P3jcIMPGK8thxyHxUsWB5fEsLnltJqRDWMNywtexk24
                          skid: 'did:key:z6Mko4PvuwKzmjtaKTEV6ZhMSYqX5myTSe3L3Md4feiwCoua#z6LSkKk8HK73jYfUQRBHX3Qeb1Agv39qVNFn7n2PjRvjpPcy'
                        encryption_key: 5ZOTqwj8NredkXEOp4ZDLL1ohRQqNTS508BTkLlUVCkDoYvizCIdrg
                    ciphertext: Dl4zBqMeEDwcnyyc17nYvSQ048fcsha_Lm0dfer1nqfo5y8oHvD2VGNTp_lawNJMWCzQF3NDZxxKFz__wTUeHCqisCE_DWbjo_W-R3avzW9S-JFajv9NRtjlfd5yp-1TtD2N5d-8oTtMGdAxq3dftN2Od1xRe4stubJBebl3nf8-lG99DIVGdL8Y-D98kFDxnMxgCKn4RXyHnMowFWlhQCooLeYqo8aWjqVFkzuJzn-p47W7rV9BCuoVThhVuNkjQm_dhBrqu0QMpjJucz7OvOHp0mojdYNKwvWT6dfOVNXetMlKjWCGtCTNFaDTGLc4agdcTjAlaF1iedcVXDOLqVvEugXWGlusE3a68y6gmPnqHjXR6CsEfPwkb5hKKtsyrh1eHu_9UUang5o6N76mummVw4UZkDF6tP1PVGPvyctz82tthnOcjO5mZQG41xfMEMNxWtF8P8wCh4LotpdexXtYigzBgkI1Qoa_FK1czYWAUovysAJCTOZtmg==
                    iv: jSd3E-ElCHE-QhSDxrQ-Jv4eQhkxOj0s
                    tag: dbDolGVDdvYsYdn-vVrICw==
        description: ''
      responses:
        '200':
          description: Message sent
        '400':
          description: Error sending message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /oidc/v1/issuers:
    servers:
      - url: 'https://tenant.vii.mattr.global/ext'
    post:
      operationId: createOidcIssuer
      tags:
        - OIDC Issuers
      summary: Create an OIDC Issuer
      description: |
        Create a new OIDC Credential Issuer for this tenant.

        The Credential information defines a descriptive name for the Credential to be issued as well as the `issuerDid` and `type` that the issued Credential will contain. The `context` is used to define the JSON-LD schema for the JSON-LD terms.

        The Federated Provider details are used to obtain the values for the new credential. The OIDC provider will federate the authentication request to the OpenID Provider of the Issuer. The details of the Issuer OpenID Provider are provided in the `url`, `scope`, `clientId` and `clientSecret` attributes. If no `scope` is provided, the default value `openid profile email` will be used.

        > The `/.well-known/openid-configuration` endpoint of the federated provider needs to contain values for the `authorization_endpoint`, `token_endpoint` and `scopes_supported`.

        Claim mappings are used to map OpenID Connect terms used by federated providers and clients to JSON-LD terms used in a Credential. The defined claims are also used for display purposes in a client, like a Mobile Wallet.

        **ZKP-enabled BBS+ credential:**
        If you wish to offer a ZKP-enabled Verifiable Credential, the provided issuer DID must be a did:key with a key type of bls12381g2. The platform will automatically detect this capability and issue a ZKP-enabled BBS+ credential.

        > ZKP-enabled BBS+ credentials are an experimental feature, credentials issued to the mobile wallet will not be validated at this time.
      requestBody:
        description: The issuer payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Oidc-issuer.v1_CreateOidcIssuerRequest'
      responses:
        '201':
          description: Issuer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oidc-issuer.v1_CreateOidcIssuerResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: url
      x-codeSamples:
        - lang: curl
          source: "curl --request POST \\\n  --url https://tenant.vii.mattr.global/ext/oidc/v1/issuers \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN' \\\n  --data '{\"credential\": {\n             \"issuerDid\": \"did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5\",\n          \t \"name\": \"University Attendance Credential\",\n          \t \"context\": [\n          \t   \"https://schema.org\"\n          \t ],\n          \t \"type\": [\n          \t   \"AlumniCredential\"\n          \t ]\n           },\n           \"federatedProvider\": {\n          \t \"url\": \"https://example-university.au.auth0.com\",\n          \t \"scope\": [\n          \t   \"openid\",\n          \t   \"profile\",\n          \t   \"email\"\n          \t ],\n          \t \"clientId\": \"vJ0SCKchr4XjC0xHNE8DkH6Pmlg2lkCN\",\n          \t \"clientSecret\": \"QNwfa4Yi4Im9zy1u_15n7SzWKt-9G5cdH0r1bONRpUPfN-UIRaaXv_90z8V6-OjH\"\n           },\n           \"claimMappings\": [\n          \t {\n          \t   \"jsonLdTerm\": \"alumniOf\",\n          \t   \"oidcClaim\": \"alumni_of\"\n          \t }\n           ]\n          }'\n"
    get:
      operationId: getOidcIssuers
      tags:
        - OIDC Issuers
      summary: Retrieve list of OIDC Issuers
      description: |
        Returns a list of all OIDC Issuers in the Tenant.
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
          in: query
          name: limit
          description: 'Range size of returned issuer entries, default 100'
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the range of issuer entries
      responses:
        '200':
          description: Returns a page of issuers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oidc-issuer.v1_GetOidcIssuersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: query
                        msg: Failed to decode base64url data
                        param: cursor
                        value: abc
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/issuers \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
  '/oidc/v1/issuers/{id}':
    servers:
      - url: 'https://tenant.vii.mattr.global/ext'
    parameters:
      - $ref: '#/components/parameters/IssuerId'
    get:
      operationId: getOidcIssuer
      tags:
        - OIDC Issuers
      summary: Retrieve an OIDC Issuer
      description: Retrieve an OIDC Issuer by providing an Issuer ID.
      responses:
        '200':
          description: Retrieved Issuer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oidc-issuer.v1_CreateOidcIssuerResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: issuerId
                        value: abc
        '404':
          description: The Issuer is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Issuer not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: issuerId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599 \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
    put:
      operationId: updateOidcIssuer
      tags:
        - OIDC Issuers
      summary: Update an OIDC Issuer
      description: |
        Update an OIDC Credential Issuer.

        The `issuerDid` is the Issuer DID that will be used in the issued Credential.

        The `credentialName` describes the Credential and `credentialTypes` defines the Credential Types for the issued Credential.

        In order for the tenant to issue a new credential, the OIDC bridge will federate the authentication request to the OpenID Provider of the Issuer. The details of the Issuer OpenID Provider are provided in the `federatedProviderUrl`, `federatedProviderScope`, `federatedProviderClientId` and `federatedProviderClientSecret` attributes. If no `federatedProviderScope` is provided, the default value `openid profile email` will be used.

        > The `/.well-known/openid-configuration` endpoint of the federated provider needs to contain values for the `authorization_endpoint`, `token_endpoint` and `scopes_supported` which needs to contain `openid` and `profile`.

        Claim mappings are used to map OpenID Connect terms used by federated providers and clients to JSON-LD terms used in a Credential. The `jsonLdContext` is used to define the JSON-LD schema for the JSON-LD terms. The defined claims are also used for display purposes in a client, like a Mobile Wallet.

        **ZKP-enabled BBS+ credential:**
        If you wish to offer a ZKP-enabled Verifiable Credential, the provided issuer DID must be a did:key with a key type of bls12381g2. The platform will automatically detect this capability and issue a ZKP-enabled BBS+ credential.

        > ZKP-enabled BBS+ credentials are an experimental feature, credentials issued to the mobile wallet will not be validated at this time.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Oidc-issuer.v1_CreateOidcIssuerRequest'
        description: Update an Issuer
      responses:
        '200':
          description: Successfully updated the Issuer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oidc-issuer.v1_CreateOidcIssuerResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: url
        '404':
          description: The Issuer is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Issuer not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: issuerId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
      x-codeSamples:
        - lang: curl
          source: "curl --request PUT \\\n  --url https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599 \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN' \\\n  --data '{\"credential\": {\n             \"issuerDid\": \"did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5\",\n          \t \"name\": \"University Attendance Credential\",\n          \t \"context\": [\n          \t   \"https://schema.org\"\n          \t ],\n          \t \"type\": [\n          \t   \"AlumniCredential\"\n          \t ]\n           },\n           \"federatedProvider\": {\n          \t \"url\": \"https://example-university.au.auth0.com\",\n          \t \"scope\": [\n          \t   \"openid\",\n          \t   \"profile\",\n          \t   \"email\"\n          \t ],\n          \t \"clientId\": \"vJ0SCKchr4XjC0xHNE8DkH6Pmlg2lkCN\",\n          \t \"clientSecret\": \"QNwfa4Yi4Im9zy1u_15n7SzWKt-9G5cdH0r1bONRpUPfN-UIRaaXv_90z8V6-OjH\"\n           },\n           \"claimMappings\": [\n          \t {\n          \t   \"jsonLdTerm\": \"alumniOf\",\n          \t   \"oidcClaim\": \"alumni_of\"\n          \t }\n           ]\n          }'\n"
    delete:
      operationId: deleteOidcIssuer
      tags:
        - OIDC Issuers
      summary: Remove an OIDC Issuer
      description: |
        Removes an OIDC Issuer by providing an Issuer ID.
      responses:
        '204':
          description: Issuer deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: issuerId
                        value: abc
        '404':
          description: The Issuer is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Issuer not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: issuerId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
      x-codeSamples:
        - lang: curl
          source: |
            curl --request DELETE \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599 \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
  '/oidc/v1/issuers/{id}/clients':
    servers:
      - url: 'https://tenant.vii.mattr.global/ext'
    parameters:
      - $ref: '#/components/parameters/IssuerId'
    post:
      operationId: createOidcIssuerClient
      tags:
        - OIDC Issuer Client
      summary: Create a Client
      description: |
        Issuer clients are required to be created in the system for custom digital wallets and VC Issue flows that are enbled through the OIDC Credential Provider.

        The Create Client endpoint accepts OpenID Connect standard registration parameters.

        > When dealing with personal identity information it is strongly recommended to follow the Authorization Code Flow which ensures sensitive data is transmitted via the `/token` endpoint back-channel.
      requestBody:
        description: The client payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Oidc-issuer.v1_CreateOidcIssuerClientRequest'
      responses:
        '201':
          description: Client created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oidc-issuer.v1_CreateOidcIssuerClientResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: redirectUris is not array of strings
                        param: redirectUris
      x-codeSamples:
        - lang: curl
          source: |
            curl --request POST \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/clients \
              --header 'Accept: application/json' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN' \
              --data '{"name": "OIDC Client",
                       "redirectUris": [
                         "https://example.com/callback"
                       ],
                       "responseTypes": [
                         "code"
                       ],
                       "grantTypes": [
                         "authorization_code"
                       ],
                       "tokenEndpointAuthMethod": "client_secret_post",
                       "idTokenSignedResponseAlg": "ES256",
                       "applicationType": "web"
                      }'
    get:
      operationId: getOidcIssuerClients
      tags:
        - OIDC Issuer Client
      summary: Retrieve list of Clients
      description: |
        Returns a list of all OIDC Issuer Clients in the Tenant.
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
          in: query
          name: limit
          description: 'Range size of returned client entries, default 100'
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the range of client entries
      responses:
        '200':
          description: Returns a page of clients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oidc-issuer.v1_GetOidcIssuerClientsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: query
                        msg: Failed to decode base64url data
                        param: cursor
                        value: abc
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/clients \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
  '/oidc/v1/issuers/{id}/clients/{clientId}':
    servers:
      - url: 'https://tenant.vii.mattr.global/ext'
    parameters:
      - $ref: '#/components/parameters/IssuerId'
      - schema:
          type: string
          format: uuid
          example: 6a860559-21a3-4b57-9a2b-aaea3ba4683d
        name: clientId
        in: path
        required: true
        description: Client ID
    get:
      operationId: getOidcIssuerClient
      tags:
        - OIDC Issuer Client
      summary: Retrieve a Client
      description: Retrieve an OIDC Issuer Client by providing a Client ID.
      responses:
        '200':
          description: Retrieved Client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oidc-issuer.v1_CreateOidcIssuerClientResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: clientId
                        value: abc
        '404':
          description: The Client is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Client not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: clientId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/clients/6a860559-21a3-4b57-9a2b-aaea3ba4683d \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
    put:
      operationId: updateOidcIssuerClient
      tags:
        - OIDC Issuer Client
      summary: Update a Client
      description: |
        Update an OIDC Issuer Client.

        The Client endpoint accepts OpenID Connect standard registration parameters.

        > When dealing with personal identity information it is strongly recommended to follow the Authorization Code Flow which ensures sensitive data is transmitted via the `/token` endpoint back-channel.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Oidc-issuer.v1_CreateOidcIssuerClientRequest'
        description: Update a client
      responses:
        '200':
          description: Successfully updated a Client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oidc-issuer.v1_CreateOidcIssuerClientResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: redirectUris is not array of strings
                        param: redirectUris
        '404':
          description: The Client is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Client not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: clientId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
      x-codeSamples:
        - lang: curl
          source: |
            curl --request PUT \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/clients/6a860559-21a3-4b57-9a2b-aaea3ba4683d \
              --header 'Accept: application/json' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN' \
              --data '{"name": "OIDC Client",
                       "redirectUris": [
                         "https://example.com/callback"
                       ],
                       "responseTypes": [
                         "code"
                       ],
                       "grantTypes": [
                         "authorization_code"
                       ],
                       "tokenEndpointAuthMethod": "client_secret_post",
                       "idTokenSignedResponseAlg": "ES256",
                       "applicationType": "web"
                      }'
    delete:
      operationId: deleteOidcIssuerClient
      tags:
        - OIDC Issuer Client
      summary: Remove a Client
      description: |
        Removes an OIDC Issuer Client by providing a Client ID.
      responses:
        '204':
          description: Client deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: clientId
                        value: abc
        '404':
          description: The Client is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Client not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: clientId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
      x-codeSamples:
        - lang: curl
          source: |
            curl --request DELETE \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/clients/6a860559-21a3-4b57-9a2b-aaea3ba4683d \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
  '/oidc/v1/issuers/{id}/.well-known/openid-configuration':
    servers:
      - url: 'https://tenant.vii.mattr.global/ext'
    parameters:
      - schema:
          type: string
          format: uuid
          example: 983c0a86-204f-4431-9371-f5a22e506599
        name: id
        in: path
        required: true
        description: Issuer ID
    get:
      operationId: issuerWellKnownOidcConfig
      security: []
      tags:
        - OIDC Issuer Auth
      summary: Well Known OpenId Configuration
      description: |
        The standard OpenID Connect Well Known configuration metadata endpoint.

        This endpoint is unprotected, public facing and can be used by any party wishing to discover the OpenID Connect capabilities.
      responses:
        '200':
          description: Returns OpenID configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oidc-issuer.v1_OpenIdConfiguration'
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/.well-known/openid-configuration \
              --header 'Accept: application/json'
  '/oidc/v1/issuers/{id}/token':
    post:
      summary: IssuerToken
      operationId: issuertoken
      description: Internal only
      tags:
        - Issuer Token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
    parameters:
      - $ref: '#/components/parameters/IssuerId'
  '/oidc/v1/issuers/{id}/authorize':
    get:
      summary: IssuerAuth
      operationId: issuerAuth
      description: Internal only
      tags:
        - Issuer Auth
      responses:
        '200':
          description: OK
    parameters:
      - $ref: '#/components/parameters/IssuerId'
  '/oidc/v1/issuers/{id}/offers':
    servers:
      - url: 'https://tenant.vii.mattr.global/ext'
    parameters:
      - $ref: '#/components/parameters/IssuerId'
    post:
      summary: Create an OpenId credential offer payload
      operationId: CreateOidcOfferPayload
      tags:
        - OIDC Issuers
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                  type:
                    type: string
                    minLength: 1
                  to:
                    type: array
                    items:
                      required:
                        - string
                      properties: {}
                  from:
                    type: string
                    minLength: 1
                  created_time:
                    type: number
                  body:
                    type: object
                    properties:
                      uri:
                        type: string
                        minLength: 1
                    required:
                      - uri
                required:
                  - id
                  - type
                  - to
                  - from
                  - created_time
                  - body
              examples:
                Message payload:
                  value:
                    id: 733d1de2-9286-447e-a701-29b1292089d0
                    type: 'https://mattr.global/schemas/verifiable-credential/offer/OidcCredentialProvider'
                    to:
                      - 'did:key:z6MkgmEkNM32vyFeMXcQA7AfQDznu47qHCZpy2AYH2Dtdu1d'
                    from: 'did:key:z6MkreuqFq6WrwozTeGKuUDz8bniTFRNAg8f3ZB862YdLp7v'
                    created_time: 1616052936783
                    body:
                      uri: 'openid://discovery?issuer=https://tenant.vii.mattr.global/ext/oidc/v1/issuers/58ab2731-16a3-4c4c-a3b2-89fd242d1685'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePayloadRequest'
            examples:
              Create payload:
                value:
                  from: 'did:key:z6MkreuqFq6WrwozTeGKuUDz8bniTFRNAg8f3ZB862YdLp7v'
                  to:
                    - 'did:key:z6MkgmEkNM32vyFeMXcQA7AfQDznu47qHCZpy2AYH2Dtdu1d'
        description: Create a message payload for an Offer
      description: |-
        Create a payload that can form a message in the JWM format that can be used in sending notifications to subjects to start an OIDC Issuer credential offer flow.

        - Use a DID setup on the tenant as the `from` value, this should be a DID with a key type suitable for messaging (not a BLS key type)
        - Include a SubjectDID as the `to` value - this value is only used in the message construction, it should be the same value as the intended recipient.

        To send a notification to the Subject DID holder, use the payload with the /messaging/encrypt and /messaging/send endpoints.
  /oidc/v1/verifiers:
    servers:
      - url: 'https://tenant.vii.mattr.global/ext'
    post:
      operationId: createOidcVerifier
      tags:
        - OIDC Verifiers
      summary: Create an OIDC Verifier
      description: |
        Create a new OIDC Credential Verifier for this tenant.

        The `verifierDid` is the Verifier DID that will be used to securely send the Credential to.

        The `presentationTemplateId` references the Presentation Template that defines what Credential is being requested for presentation.

        Claim mappings are used to map JSON-LD terms used in a Credential to OpenID Connect terms used by clients.
      requestBody:
        description: The verifier payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Oidc-verifier.v1_CreateOidcVerifierRequest'
      responses:
        '201':
          description: Verifier created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oidc-verifier.v1_CreateOidcVerifierResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: presentationTemplateId
      x-codeSamples:
        - lang: curl
          source: |
            curl --request POST \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/verifiers \
              --header 'Accept: application/json' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN' \
              --data '{"verifierDid": "did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq",
                       "presentationTemplateId": "364b6a1b-3600-4927-a6ac-4d66aa6bbac3",
                       "claimMappings": [
                         {
                           "jsonLdFqn": "http://schema.org/alumniOf",
                           "oidcClaim": "alumni_of"
                         }
                       ]
                      }'
    get:
      operationId: getOidcVerifiers
      tags:
        - OIDC Verifiers
      summary: Retrieve list of OIDC Verifiers
      description: |
        Returns a list of all OIDC Verifiers in the Tenant.
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
          in: query
          name: limit
          description: 'Range size of returned verifier entries, default 100'
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the range of verifier entries
      responses:
        '200':
          description: Returns a page of Verifiers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oidc-verifier.v1_GetOidcVerifiersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: query
                        msg: Failed to decode base64url data
                        param: cursor
                        value: abc
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/verifiers \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
  '/oidc/v1/verifiers/{id}':
    servers:
      - url: 'https://tenant.vii.mattr.global/ext'
    parameters:
      - $ref: '#/components/parameters/VerifierId'
    get:
      operationId: getOidcVerifier
      tags:
        - OIDC Verifiers
      summary: Retrieve an OIDC Verifier
      description: Retrieve an OIDC Verifier by providing a Verifier ID.
      responses:
        '200':
          description: Retrieved Verifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oidc-verifier.v1_CreateOidcVerifierResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: verifierId
                        value: abc
        '404':
          description: The Verifier is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Verifier not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: verifierId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/verifiers/41458e5a-9092-40b7-9a26-d4eb43c5792f \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
    put:
      operationId: updateOidcVerifier
      tags:
        - OIDC Verifiers
      summary: Update an OIDC Verifier
      description: |
        Update an OIDC Credential Verifier.

        The `verifierDid` is the Verifier DID that will be used to securely send the Credential to.

        The `presentationTemplateId` references the Presentation Template that defines what Credential is being requested for presentation.

        Claim mappings are used to map JSON-LD terms used in a Credential to OpenID Connect terms used by clients.  The `jsonLdContext` is used to define the JSON-LD schema for the JSON-LD terms.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Oidc-verifier.v1_CreateOidcVerifierRequest'
        description: Update a verifier
      responses:
        '200':
          description: Successfully updated a Verifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oidc-verifier.v1_CreateOidcVerifierResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: presentationTemplateId
        '404':
          description: The Verifier is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Verifier not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: verifierId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
      x-codeSamples:
        - lang: curl
          source: |
            curl --request PUT \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/verifiers/41458e5a-9092-40b7-9a26-d4eb43c5792f \
              --header 'Accept: application/json' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN' \
              --data '{"verifierDid": "did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq",
                       "presentationTemplateId": "364b6a1b-3600-4927-a6ac-4d66aa6bbac3",
                       "claimMappings": [
                         {
                           "jsonLdFqn": "http://schema.org/alumniOf",
                           "oidcClaim": "alumni_of"
                         }
                       ]
                      }'
    delete:
      operationId: deleteOidcVerifier
      tags:
        - OIDC Verifiers
      summary: Remove an OIDC Verifier
      description: |
        Removes an OIDC Verifier by providing a Verifier ID.
      responses:
        '204':
          description: Verifier deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: verifierId
                        value: abc
        '404':
          description: The Verifier is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Verifier not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: verifierId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
      x-codeSamples:
        - lang: curl
          source: |
            curl --request DELETE \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/verifiers/41458e5a-9092-40b7-9a26-d4eb43c5792f \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
  '/oidc/v1/verifiers/{id}/clients':
    servers:
      - url: 'https://tenant.vii.mattr.global/ext'
    parameters:
      - schema:
          type: string
          format: uuid
          example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
        name: id
        in: path
        required: true
        description: Verifier ID
    post:
      operationId: createOidcVerifierClient
      tags:
        - OIDC Verifier Client
      summary: Create a Client
      description: |
        Relying party clients are required to be created in the system for Authorization and VC Verify flows that are enbled through OIDC.

        The Create Client endpoint accepts OpenID Connect standard registration parameters.

        > When dealing with personal identity information it is strongly recommended to follow the Authorization Code Flow which ensures sensitive data is transmitted via the `/token` endpoint back-channel.
      requestBody:
        description: The client payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Oidc-verifier.v1_CreateOidcVerifierClientRequest'
      responses:
        '201':
          description: Client created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oidc-verifier.v1_CreateOidcVerifierClientResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: redirectUris is not array of strings
                        param: redirectUris
      x-codeSamples:
        - lang: curl
          source: |
            curl --request POST \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/verifiers/41458e5a-9092-40b7-9a26-d4eb43c5792f/clients \
              --header 'Accept: application/json' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN' \
              --data '{"name": "OIDC Client",
                       "redirectUris": [
                         "https://example.com/callback"
                       ],
                       "responseTypes": [
                         "code"
                       ],
                       "grantTypes": [
                         "authorization_code"
                       ],
                       "tokenEndpointAuthMethod": "client_secret_post",
                       "idTokenSignedResponseAlg": "ES256",
                       "applicationType": "web",
                       "logoUri": "https://example.com/logo.png"
                      }'
    get:
      operationId: getOidcVerifierClients
      tags:
        - OIDC Verifier Client
      summary: Retrieve list of Clients
      description: |
        Returns a list of all OIDC Verifier Clients in the Tenant.
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
          in: query
          name: limit
          description: 'Range size of returned client entries, default 100'
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the range of client entries
      responses:
        '200':
          description: Returns a page of clients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oidc-verifier.v1_GetOidcVerifierClientsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: query
                        msg: Failed to decode base64url data
                        param: cursor
                        value: abc
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/verifiers/41458e5a-9092-40b7-9a26-d4eb43c5792f/clients \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
  '/oidc/v1/verifiers/{id}/clients/{clientId}':
    servers:
      - url: 'https://tenant.vii.mattr.global/ext'
    parameters:
      - $ref: '#/components/parameters/VerifierId'
      - schema:
          type: string
          format: uuid
          example: da9bb6e4-c9ae-4468-b6ac-72b90d6efd5d
        name: clientId
        in: path
        required: true
        description: Client ID
    get:
      operationId: getOidcVerifierClient
      tags:
        - OIDC Verifier Client
      summary: Retrieve a Client
      description: Retrieve an OIDC Verifier Client by providing a Client ID.
      responses:
        '200':
          description: Retrieved Client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oidc-verifier.v1_CreateOidcVerifierClientResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: clientId
                        value: abc
        '404':
          description: The Client is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Client not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: clientId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/verifiers/41458e5a-9092-40b7-9a26-d4eb43c5792f/clients/da9bb6e4-c9ae-4468-b6ac-72b90d6efd5d \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
    put:
      operationId: updateOidcVerifierClient
      tags:
        - OIDC Verifier Client
      summary: Update a Client
      description: |
        Update an OIDC Verifier Client.

        The Client endpoint accepts OpenID Connect standard registration parameters.

        > When dealing with personal identity information it is strongly recommended to follow the Authorization Code Flow which ensures sensitive data is transmitted via the `/token` endpoint back-channel.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Oidc-verifier.v1_CreateOidcVerifierClientRequest'
        description: Update a client
      responses:
        '200':
          description: Successfully updated a Client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oidc-verifier.v1_CreateOidcVerifierClientResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: redirectUris is not array of strings
                        param: redirectUris
        '404':
          description: The Client is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Client not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: clientId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
      x-codeSamples:
        - lang: curl
          source: |
            curl --request PUT \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/verifiers/41458e5a-9092-40b7-9a26-d4eb43c5792f/clients/da9bb6e4-c9ae-4468-b6ac-72b90d6efd5d \
              --header 'Accept: application/json' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN' \
              --data '{"name": "OIDC Client",
                       "redirectUris": [
                         "https://example.com/callback"
                       ],
                       "responseTypes": [
                         "code"
                       ],
                       "grantTypes": [
                         "authorization_code"
                       ],
                       "tokenEndpointAuthMethod": "client_secret_post",
                       "idTokenSignedResponseAlg": "ES256",
                       "applicationType": "web",
                       "logoUri": "https://example.com/logo.png"
                      }'
    delete:
      operationId: deleteOidcVerifierClient
      tags:
        - OIDC Verifier Client
      summary: Remove a Client
      description: |
        Removes an OIDC Verifier Client by providing a Client ID.
      responses:
        '204':
          description: Client deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: clientId
                        value: abc
        '404':
          description: The Client is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Client not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: clientId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
      x-codeSamples:
        - lang: curl
          source: |
            curl --request DELETE \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/verifiers/41458e5a-9092-40b7-9a26-d4eb43c5792f/clients/da9bb6e4-c9ae-4468-b6ac-72b90d6efd5d \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
  '/oidc/v1/verifiers/{id}/.well-known/openid-configuration':
    servers:
      - url: 'https://tenant.vii.mattr.global/ext'
    parameters:
      - schema:
          type: string
          format: uuid
          example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
        name: id
        in: path
        required: true
        description: Verifier ID
    get:
      operationId: verifierWellKnownOidcConfig
      security: []
      tags:
        - OIDC Verifier Auth
      summary: Well Known OpenId Configuration
      description: |
        The standard OpenID Connect Well Known configuration metadata endpoint.

        This endpoint is unprotected, public facing and can be used by any party wishing to discover the OpenID Connect capabilities.
      responses:
        '200':
          description: Returns OpenID configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenIdConfiguration'
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/verifiers/41458e5a-9092-40b7-9a26-d4eb43c5792f/.well-known/openid-configuration \
              --header 'Accept: application/json'
  '/oidc/v1/verifiers/{id}/token':
    servers:
      - url: 'https://tenant.vii.mattr.global/ext'
    post:
      operationId: verifierRetrieveToken
      tags:
        - OIDC Verifier Auth
      summary: Retrieve Token
      description: |-
        > OIDC Token endpoint

        The OpenId Connect `/token` endpoint is used to obtain the `access_token` and `id_token` by presenting a valid authorization `code`
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRequest'
        description: Token endpoint request
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
      x-codeSamples:
        - lang: curl
          source: |
            curl --request POST \
              --url https://tenant.vii.mattr.global/ext/oidc/v1/verifiers/41458e5a-9092-40b7-9a26-d4eb43c5792f/token \
              --header 'Accept: application/json' \
              --header 'Content-Type: application/x-www-form-urlencoded' \
              --data 'client_id=G1s1EPMml4L0zFd63drft' \
              --data 'client_secret=REPLACE_CLIENT_SECRET' \
              --data 'grant_type=authorization_code' \
              --data 'code=REPLACE_CODE' \
              --data 'redirect_uri=https://example.com'
    parameters:
      - $ref: '#/components/parameters/VerifierId'
  /v1/presentations/templates:
    post:
      operationId: createPresTemplate
      tags:
        - Presentations
      summary: Create a presentation template
      description: |-
        A Presentation Request Template defines which credentials are required for presentation. This is used to create the actual Presentation Request, which is used by the Mobile Wallet to select which credential it should display to the Holder, asking for confirmation to be used in the Presentation to be sent.

        ### Creating the payload 
        The `domain` value must always match the domain of the tenant being used.

        The `name` value is a convenience attribute for quickly determining the intended purpose of a created template.

        The Presentation Request `query` follows the  [Verifiable Presentation Request Specification](https://w3c-ccg.github.io/vp-request-spec/).

        The following query methods have been enabled:

        - Query by Example
        - Query by Frame
        - DID Auth

        Query can accept an array of types, which makes is possible to construct complex presentation requests from the template, however creating a valid Presentation Template does not ensure that logically valid Presentation Request is created or that a credential holder would be able to satisfy the request.

        ### Query by Example
        This is a basic form of requesting credential information, it is possible to limit the request based on:
        - Credential Type - based on the `type` of the credential
        - Specific Trusted Issuer DIDs - an array of DIDs that the credential must have been issued by one of.

        ### Query by Frame
        Used primary for requesting specific claims from ZKP-enabled credentials, only the claims requested in the frame will be derived and sent in the presentation.
        - Credential Type - If an array should match the exact `type` used in the Credential otherwise a string is required to be `VerifiableCredential`.
        - CredentialSubject - request specific claims from a credential subject.
        - Specific Trusted Issuer DIDs - an array of DIDs that the credential must have been issued by one of, ensure this DID is of a BLS key type that has issued a ZKP-enabled credential.

        ### DID Auth
        The type of Template will result in a DID Auth flow resulting in just the Subject DID from the holder to be provided in the response to the Presentation Request.
        - DIDAuth

        ## Returns
        On Success, the response from the endpoint always include the Presentation Template ID, this UUID is required in OIDC Bridge Verifier instance setup and using the Verify using a Callback method. The Presentation Request endpoint uses this ID to determine the exact type of request message to create.
      requestBody:
        description: The template
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Presentations.v1_CreatePresentationTemplate'
            examples:
              Query by Example:
                value:
                  domain: tenant.vii.mattr.global
                  name: alumni_credential_request
                  query:
                    - type: QueryByExample
                      credentialQuery:
                        - required: true
                          reason: We need you to prove your alumni membership.
                          example:
                            '@context':
                              - 'https://schema.org'
                            type: AlumniCredential
                            trustedIssuer:
                              - required: true
                                issuer: 'did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5'
              Query by Frame:
                value:
                  domain: tenant.vii.mattr.global
                  name: zkp-certificate-presentation
                  query:
                    - type: QueryByFrame
                      credentialQuery:
                        - reason: Please provide your educational award and surname from your Certificate
                          frame:
                            '@context':
                              - 'https://www.w3.org/2018/credentials/v1'
                              - 'https://w3id.org/vc-revocation-list-2020/v1'
                              - 'https://schema.org'
                            type:
                              - VerifiableCredential
                              - AlumniCredential
                            credentialSubject:
                              '@explicit': true
                              educationalCredentialAwarded: {}
                              familyName: {}
                          trustedIssuer:
                            - issuer: 'did:key:zUC7KmMGXt7fs9URk9EDqWLfpCjVTtfFMexViLLkPPUfm9j4heqvk9JkLarva3sP54FGjFNLpwc63ZTef2aR2cPssFbyDj75kopYqWL16j7JigA2BAvJcwnaKvKPUybxbroRg1v'
                              required: true
                          required: true
              DID Auth:
                value:
                  name: did-auth
                  domain: tenant.vii.mattr.global
                  query:
                    - type: DIDAuth
      responses:
        '201':
          description: Template created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Presentations.v1_PresentationTemplateResponse'
              examples:
                Created:
                  value:
                    id: 364b6a1b-3600-4927-a6ac-4d66aa6bbac3
                    domain: tenant.vii.mattr.global
                    name: alumni_credential_request
                    query:
                      - type: QueryByExample
                        credentialQuery:
                          - required: true
                            reason: We need you to prove your alumni membership.
                            example:
                              '@context':
                                - 'https://schema.org'
                              type: AlumniCredential
                              trustedIssuer:
                                - required: true
                                  issuer: 'did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5'
        '400':
          description: 'Bad request, Invalid request body'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codeSamples:
        - lang: curl
          source: |
            curl --request POST \
              --url https://tenant.vii.mattr.global/core/v1/presentations/templates \
              --header 'Accept: application/json' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN' \
              --data '{"domain": "tenant.vii.mattr.global",
                       "name": "alumni_credential_request",
                       "query": [
                        {
                          "type": "QueryByExample",
                          "credentialQuery": [
                            {
                              "required": true,
                              "reason": "We need you to prove your alumni membership.",
                              "example": {
                                "@context": [
                                  "https://schema.org"
                                ],
                                "type": "AlumniCredential",
                                "trustedIssuer": [
                                  {
                                    "required": true,
                                    "issuer": "did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                       ]
                      }'
    get:
      operationId: retrievePresTemplates
      tags:
        - Presentations
      summary: Retrieve a list of presentation templates
      description: |-
        Returns a list of all Presentation Templates on the tenant.

        Use the `name` value to determine the intended purpose of the templates.
      responses:
        '200':
          description: All templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Presentations.v1_PresentationTemplateArrayResponse'
      parameters:
        - $ref: '#/components/parameters/Common_Limit'
        - $ref: '#/components/parameters/Common_Cursor'
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/core/v1/presentations/templates \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
  '/v1/presentations/templates/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: Presentation template ID
        schema:
          type: string
    get:
      operationId: retrievePresTemplate
      tags:
        - Presentations
      summary: Retrieve a presentation template
      description: Retrive a Presentation Template by providing a template ID
      responses:
        '200':
          description: Template returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Presentations.v1_PresentationTemplateResponse'
        '400':
          description: Invalid templateId parameter format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://tenant.vii.mattr.global/core/v1/presentations/templates/364b6a1b-3600-4927-a6ac-4d66aa6bbac3 \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
    delete:
      operationId: removePresTemplate
      tags:
        - Presentations
      summary: Delete presentation template
      description: Delete a Presentation Template
      responses:
        '204':
          description: Template deleted
        '400':
          description: Invalid templateId parameter format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codeSamples:
        - lang: curl
          source: |
            curl --request DELETE \
              --url https://tenant.vii.mattr.global/core/v1/presentations/templates/364b6a1b-3600-4927-a6ac-4d66aa6bbac3 \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN'
    put:
      summary: Update presentation template
      operationId: updatePresTemplate
      tags:
        - Presentations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Presentations.v1_PresentationTemplateResponse'
      description: |-
        Update a Presentation Template using the template `id`.

        Follows the same structure as the Create a Presentation Template endpoint.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Presentations.v1_UpdatePresentationTemplate'
        description: ''
  /v1/presentations/requests:
    post:
      operationId: createPresRequest
      tags:
        - Presentations
      summary: Create a presentation request
      description: |
        Creates a short lived Presentation Request.

        ### Creating the payload
        A `challenge` can be used to collerate requests
        The `DID` is used a Verifier DID to prove the authenticity of the Request to holders
        Any `callbackUrl` provide will be called on receipt of the response to the Presentation Request.
        If no `expiresTime` is provided, a default of 5 minutes will be used.

        ### Returns
        The `request` object holds the Presentation Request in the form of a constructed JWM message.

        The `request` needs to be [signed](#operation/signMessage) and conveyed to the holder, using techniques like a QR, deeplink or [encrypted](#operation/encryptMessage) and sent via a [notification message](#operation/sendMessage).
      requestBody:
        description: The presentation request payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Presentations.v1_CreatePresentationRequestRequest'
      responses:
        '201':
          description: Presentation Request created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Presentations.v1_CreatePresentationRequestResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: callbackUrl
      x-codeSamples:
        - lang: curl
          source: "curl --request POST \\\n  --url https://tenant.vii.mattr.global/core/v1/presentations/requests \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer REPLACE_ACCESS_TOKEN' \\\n  --data '{\n          \t\"challenge\": \"e1b35ae0-9e0e-11ea-9bbf-a387b27c9e60\",\n          \t\"did\": \"did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq\",\n          \t\"templateId\": \"364b6a1b-3600-4927-a6ac-4d66aa6bbac3\",\n          \t\"expiresTime\": 2594859115000,\n          \t\"callbackUrl\": \"https://tenant.vii.mattr.global/core/v1/presentations/response\"\n          }'\n"
  /oauth/token:
    servers:
      - url: 'https://auth.mattr.global'
    post:
      summary: Create API Auth Token
      operationId: authToken
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: s2dgbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6s2dcaEROemRDf5gbRVEwTTVSVFE0TmtZME9UZzVNVEpDTlVJNFJqRTBPREExTmpZMk1qazFPQSJ9.eyJodHRwOi8vbWF0dHIvdGVuYW50LWlkIjoiZWI5ZTdiMTQtMzY2ZS00NzAxLTg4OTctMTIwZmI5MTQ0YmFjIiwiaXNzIjoiaHR0cHM6Ly9tYXR0ci1wcm9kLmF1LmF1dGgwLmNvbS8iLCJzdWIiOiJSZUhOOTJXNHA0TWVkWmJub1dBczUxRWZxVXQ0VDk2Y0BjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly9wbGF0Zm9ybS5tYXR0ci5nbG9iYWwiLCJpYXQiOjE1OTE4NDk4MTMsImV4cCI6MTU5MTkzNjIxMywiYXpwIjoiUmVITjkyVzRwNE1lZFpibm9XQXM1MUVmcVV0NFQ5NmMiLCJndHkiOiJjbGllbnQtY3JlZGVudGlhbHMifQ.kZt6mteIwNqdXO8CjqnsjENCgMV2-v7VMn2gtiqIuTNSxBZxk1OkeXERMuRcZpxqIjXi7SdHshQZ9wG_Cmrns_7bG5Pq-qiKCjDOK3pi6smvws02GmDH9nK4_el9zJ92_bDA0p4T6pT0ldcSAMya7ZwTz3-PYQ3pwCwiDEMWFXPtGilfHTBDmrzCUcanmErhZcopo8agtnozuIkbdZoKGkEdXO2J59PrAerBwIbhoYYgkreWIZtlbhGHueYj43ymDOHHl3I7s7zAuK1geJX4W3baKzTMPncUyGrHrOS6OI-ZodHs7kDhTyghJ13GxRy9ikAI3mXz79plZw0qxys2ed
                    description: JWT used for access to APIs requiring bearer token auth
                  expires_in:
                    type: number
                    example: 86400
                    description: Time in ms to expiry
                  token_type:
                    type: string
                    example: Bearer
                    description: Denotes token type
                required:
                  - access_token
                  - expires_in
                  - token_type
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  error_description:
                    type: string
              examples:
                Invalid credentials:
                  value:
                    error: access_denied
                    error_description: Unauthorized
      description: |-
        Authorization endpoint for gaining token used for API requests requiring `bearerAuth`.

        You will be provided the required `client_id` and `client_secret` as part of onboarding.
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                  description: Client ID for your tenant
                  example: htf792W4p4MedZbnoWAs51EfqUt4d2
                client_secret:
                  type: string
                  description: Client seceret for your tenant
                  example: d3fYDX7FjPg1D1h2viARXsolPByQ9vMfg8LHylBy8F4s5KJLB4HhHGOxxqJnSj3G
                audience:
                  type: string
                  description: Use provided value
                  example: 'https://vii.mattr.global'
                grant_type:
                  type: string
                  description: Use provided value
                  example: client_credentials
              required:
                - client_id
                - client_secret
                - audience
                - grant_type
            examples:
              Request:
                value:
                  client_id: htf792W4p4MedZbnoWAs51EfqUt4d2
                  client_secret: d3fYDX7FjPg1D1h2viARXsolPByQ9vMfg8LHylBy8F4s5KJLB4HhHGOxxqJnSj3G
                  audience: 'https://vii.mattr.global'
                  grant_type: client_credentials
      tags:
        - Security
      x-codeSamples:
        - lang: curl
          source: |
            curl --request POST \
              --url https://auth.mattr.global/oauth/token/ \
              --header 'Content-Type: application/json' \
              --data '{"client_id": "KWdv9qo9Vnl9rrCRB7sfGKFTp4uO09im",
                       "client_secret": "ztJe2GVpOb1_rUo9Vnl9rrCRB7sfGKFTp4uO0DOfLnA5FSz96wbrzgJMQ",
                       "audience": "https://vii.mattr.global",
                       "grant_type": "client_credentials"
                      }'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    clientRegistrationAuth:
      type: http
      scheme: bearer
      bearerFormat: Client registration_access_token
  schemas:
    CreatePayloadRequest:
      description: Create a payload
      type: object
      properties:
        from:
          type: string
          minLength: 1
          description: DID on the tenant used in a message
        to:
          type: array
          description: List of SubjectDIDs
          items:
            type: string
      required:
        - from
        - to
    CredentialStatus:
      type: object
      description: Credential status location information
      properties:
        id:
          type: string
          description: Unique ID for the credential status
          example: 'https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1'
        type:
          type: string
          description: Indicates that the status contains revocation information
          example: RevocationList2020Status
        revocationListIndex:
          type: integer
          example: 1
          description: The location within the revocation list for the credential
        revocationListCredential:
          type: string
          description: The location of the revocation list
          example: 'https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3'
    DecryptMessageResponse:
      type: object
      properties:
        payload:
          oneOf:
            - type: string
            - type: object
        senderDidUrl:
          type: string
        senderPublicJwk:
          type: object
        recipientDidUrl:
          type: string
    ED25519Signature2018:
      type: object
      properties:
        type:
          type: string
          example: Ed25519Signature2018
        created:
          type: string
          format: date-time
          example: '2020-05-02T12:06:29Z'
        jws:
          type: string
          description: Compact form of JWS
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        proofPurpose:
          type: string
          example: assertionMethod
        verificationMethod:
          type: string
          example: 'did:issuer:abcdb1f712ebc6f1c276e12ec21'
    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
                description: The value that was provided
              msg:
                type: string
                example: Invalid value
                description: Description of why the request is invalid
              param:
                type: string
                example: id
                description: The parameter that is invalid
              location:
                type: string
                example: body
                description: 'The location in either body, query, path or params'
    InitialTokenRequest:
      type: object
      properties:
        client_id:
          oneOf:
            - example: G1s1EPMml4L0zFd63R1YP
          type: string
        client_secret:
          type: string
          example: aYzQUXD0VtlNHhTnxt6cyJeMgLczIBm-AA87STG0narCG8P0iL78fAO7TcWjPBYKwpoZY7Sw8MWNwvqf5VVqFw
        grant_type:
          type: string
          example: authorization_code
        code:
          type: string
          example: shdT2ks5tg9b
        redirect_uri:
          type: string
          format: uri
          example: 'https://my-client-rp.example.com'
    JSONObjectMessage:
      type: object
      description: A JSON Object plaintext message
      example:
        msg: this is a message
    OpenIdConfiguration:
      type: object
      properties:
        authorization_endpoint:
          type: string
          format: uri
          example: 'https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/authorize'
        claims_parameter_supported:
          type: boolean
          example: true
        claims_supported:
          type: array
          items:
            type: string
          example:
            - sub
            - sid
            - auth_time
            - iss
        code_challenge_methods_supported:
          type: array
          items:
            type: string
          example:
            - S256
        end_session_endpoint:
          type: string
          format: uri
          example: 'https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/session/end'
        grant_types_supported:
          type: array
          items:
            type: string
          example:
            - implicit
            - authorization_code
            - refresh_token
        id_token_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - ES256
        issuer:
          type: string
          format: uri
          example: 'https://tenant.vii.mattr.global'
        jwks_uri:
          type: string
          format: uri
          example: 'https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/jwks'
        registration_endpoint:
          type: string
          format: uri
          example: 'https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/clients'
        request_object_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - RS256
            - PS256
            - ES256
            - EdDSA
        request_parameter_supported:
          type: boolean
          example: true
        request_uri_parameter_supported:
          type: boolean
          example: true
        require_request_uri_registration:
          type: boolean
          example: true
        response_modes_supported:
          type: array
          items:
            type: string
          example:
            - form_post
            - fragment
            - query
        response_types_supported:
          type: array
          items:
            type: string
          example:
            - code id_token
            - code
            - id_token
            - none
        scopes_supported:
          type: array
          items:
            type: string
          example:
            - openid
            - offline_access
        subject_types_supported:
          type: array
          items:
            type: string
          example:
            - public
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
          example:
            - none
            - client_secret_basic
            - client_secret_jwt
            - client_secret_post
            - private_key_jwt
        token_endpoint_auth_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - RS256
            - PS256
            - ES256
            - EdDSA
        token_endpoint:
          type: string
          format: uri
          example: 'https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/token'
        userinfo_endpoint:
          type: string
          format: uri
          example: 'https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/me'
        userinfo_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - ES256
        claim_types_supported:
          type: array
          items:
            type: string
          example:
            - normal
    RefreshTokenRequest:
      type: object
      properties:
        client_id:
          type: string
        client_secret:
          type: string
        grant_type:
          type: string
          example: authorization_code
        refresh_token:
          type: string
        redirect_uri:
          type: string
          format: uri
    SendMessageRequest:
      type: object
      properties:
        to:
          type: string
          description: recipient DID
        message:
          oneOf:
            - type: string
            - type: object
          description: JWE message
    SignMessageRequest:
      type: object
      required:
        - didUrl
        - payload
      properties:
        didUrl:
          type: string
          description: The did keyId that will be used to sign the message with.
          example: 'did:example:abcdefghijkl#key1'
        payload:
          $ref: '#/components/schemas/JSONObjectMessage'
    SignMessageResponse:
      title: SignMessageResponse
      type: string
      description: Signed message in a response
      example: eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa21mazNtMldIQlVxVm94SlZ3R1NQejVrYmFKNnpBMXRwN1JRWUJiUUdtczNoI3o2TWttZmszbTJXSEJVcVZveEpWd0dTUHo1a2JhSjZ6QTF0cDdSUVlCYlFHbXMzaCJ9.eyJtc2ciOiJUaGlzIGlzIGEgcGF5bG9hZCJ9.5E9qEmmSOMHLABAr4A9VzuNKFaO4EDo2GSCMoxQm9zsE7eCmEEuaAxtNhOUdd-Wvj64vqBBVl84XB1Yg7X9wBg
      required:
        - ciphertext
    TokenRequest:
      oneOf:
        - $ref: '#/components/schemas/InitialTokenRequest'
        - $ref: '#/components/schemas/RefreshTokenRequest'
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          enum:
            - bearer
        refresh_token:
          type: string
        expires_in:
          type: integer
        id_token:
          type: string
    VerifiableCredential:
      type: object
      properties:
        '@context':
          type: array
          example:
            - 'https://www.w3.org/2018/credentials/v1'
            - 'https://www.w3.org/2018/credentials/examples/v1'
          items:
            type: string
            minLength: 1
            example: '"https://www.w3.org/2018/credentials/v1", "https://www.w3.org/2018/credentials/examples/v1"'
        type:
          type: array
          example:
            - VerifiableCredential
            - AlumniCredential
          items:
            type: string
            minLength: 1
            example: '"AlumniCredential", "VerifiableCredential"'
        issuer:
          description: Includes issuer id (did) and its domain (inside name parameter)
          oneOf:
            - type: object
              properties:
                id:
                  type: string
                  example: 'did:issuer:abcdb1f712ebc6f1c276e12ec21'
                name:
                  type: string
                  example: Example University
            - type: string
              properties: {}
        issuanceDate:
          type: string
          format: date-time
          example: '2020-05-02T12:06:29.156Z'
        credentialStatus:
          $ref: '#/components/schemas/CredentialStatus'
        credentialSubject:
          type: object
          example:
            id: 'did:example:abcdb1f712ebc6f1c276e12ec21'
            givenName: Jamie
            familyName: Doe
          properties:
            id:
              type: string
              example: 'did:key:z6MkoPL5UbUcmKstxgftmFQfy246ocJ3YpJntgRM9f9eAWNY'
            givenName:
              type: string
              example: Jamie
            familyName:
              type: string
              example: Doe
            alumniOf:
              type: string
              example: Example University
        proof:
          $ref: '#/components/schemas/ED25519Signature2018'
      required:
        - '@context'
        - type
        - issuanceDate
        - credentialSubject
        - proof
    VerifyMessageResponse:
      type: object
      properties:
        didUrl:
          type: string
          description: The didUrl included on the jws object
          example: 'did:key:z6MkqesDwy7M5wPEoodrMSwgQFFWwEDtmx8X4V1zF7zho3ri#z6MkiKdPk7cYsCySi8BgPnjsZpUkb3aoHsBN4NQKQCSDKEdU'
        did:
          type: string
          description: The did parsed from the didUrl
          example: 'did:key:z6MkqesDwy7M5wPEoodrMSwgQFFWwEDtmx8X4V1zF7zho3ri'
        verified:
          type: boolean
          description: Result of jws verification
          example: true
        payload:
          oneOf:
            - type: string
            - type: object
          description: The payload of the verified message
    VerifyRequest:
      type: object
      properties:
        jws:
          type: string
          description: Compact form of JWS
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    Credentials.v1_CreateCredentialRequest:
      type: object
      properties:
        '@context':
          type: array
          description: 'Additional to any JSON-LD contexts ''https://www.w3.org/2018/credentials/v1'' is always required.'
          minLength: 1
          example:
            - 'https://www.w3.org/2018/credentials/v1'
            - 'https://schema.org'
          items:
            type: string
        subjectId:
          type: string
          description: 'Generally a DID, identifier of who/what the subject is'
          example: 'did:example:abcdb1f712ebc6f1c276e12ec21'
          minLength: 1
        tag:
          type: string
          description: 'An optional tag to filter by, will not be part of the issued credential'
          example: identifier123
          minLength: 1
          maxLength: 1024
        type:
          type: array
          example: '[VerifiableCredential, AlumniCredential]'
          description: 'Types for the Credential, VerifiableCredential must be the first value'
          items:
            type: string
            description: 'Describes the additional specific types of the claimed data, must be within the scope of @context, resulting credential will always includes VerifiableCredential'
        claims:
          type: object
          description: Each value is a claim that is defined by one of the JSON-LD schemas.
          minItems: 1
          example:
            givenName: Jamie
            familyName: Doe
            alumniOf: <span lang="en">Example University</span>
        issuer:
          type: object
          description: Includes Issuer id (DID) and domain name
          required:
            - id
            - name
          properties:
            id:
              type: string
              example: 'did:issuer:abcdb1f712ebc6f1c276e12ec21'
            name:
              type: string
              example: 'https://example.edu/issuers/565049'
        persist:
          type: boolean
          description: Flag to indicate whether the full credential should be stored in platform
        revocable:
          type: boolean
          description: Flag to indicate if the credential needs to support revocation
      required:
        - '@context'
        - type
        - claims
        - issuer
    Credentials.v1_CreateCredentialResponse:
      type: object
      x-examples: {}
      title: ''
      properties:
        id:
          type: string
          example: 873277c0-a162-11ea-8a1d-a111119347e6
        credential:
          $ref: '#/components/schemas/VerifiableCredential'
        tag:
          type: string
          example: identifier123
        credentialStatus:
          $ref: '#/components/schemas/Credentials.v1_CredentialStatus'
        issuanceDate:
          type: string
          example: '2020-05-02T12:06:29.156Z'
      required:
        - id
        - credential
        - issuanceDate
    Credentials.v1_CredentialStatus:
      type: object
      description: Credential status location information
      properties:
        id:
          type: string
          description: Unique ID for the credential status
          example: 'https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1'
        type:
          type: string
          description: Indicates that the status contains revocation information
          example: RevocationList2020Status
        revocationListIndex:
          type: integer
          example: 1
          description: The location within the revocation list for the credential
        revocationListCredential:
          type: string
          description: The location of the revocation list
          example: 'https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3'
    Credentials.v1_GetCredentialResponse:
      type: object
      x-examples: {}
      title: ''
      properties:
        id:
          type: string
          example: 873277c0-a162-11ea-8a1d-a111119347e6
        credential:
          $ref: '#/components/schemas/VerifiableCredential'
        tag:
          type: string
          example: identifier123
        credentialStatus:
          $ref: '#/components/schemas/Credentials.v1_CredentialStatus'
        issuanceDate:
          type: string
          example: '2020-05-02T12:06:29.156Z'
      required:
        - id
        - issuanceDate
    Credentials.v1_GetCredentialsResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          type: array
          items:
            $ref: '#/components/schemas/Credentials.v1_GetCredentialResponse'
    Credentials.v1_RevocationStatusResponse:
      type: object
      properties:
        isRevoked:
          type: boolean
          description: 'true if the credential is revoked, false otherwise'
          example: false
      required:
        - isRevoked
      description: ''
      title: ''
    Credentials.v1_SetRevocationStatus:
      type: object
      properties:
        isRevoked:
          type: boolean
          description: 'true if the credential is revoked, false otherwise'
          example: false
      required:
        - isRevoked
      description: ''
      title: ''
    Credentials.v1_VerifyCredentialRequest:
      title: VerifyCredentialRequest
      type: object
      properties:
        credential:
          $ref: '#/components/schemas/VerifiableCredential'
    Dids.v1_CreateDidDocument:
      type: object
      properties:
        method:
          type: string
          enum:
            - key
            - web
            - sov
        options:
          type: object
          description: 'To define a key type for a did:key or to define a domain for did:web'
          minItems: 1
          example:
            keyType: bls12381g2
      required:
        - method
      description: ''
      title: ''
    Dids.v1_CreateDidResponse:
      type: object
      properties:
        registrationStatus:
          type: string
        did:
          type: string
          example: 'did:key:z6Mkt7bFYc4V2HdAxwhMtaY6cgJckYXwhYdPLJCcnVqzrkpr'
        metadata:
          $ref: '#/components/schemas/Dids.v1_DidMetadata'
    Dids.v1_DidDocument:
      type: object
    Dids.v1_DidMetadata:
      type: object
      required:
        - keys
      properties:
        registered:
          type: number
          description: Timestamp of when the DID was registered
          example: 1583233799656
        keys:
          type: array
          description: An array of keys that describe the relationship between keys listed in the DID document and keys that exist in a connected KMS.
          items:
            $ref: '#/components/schemas/Dids.v1_DidMetadataKey'
        initialDidDocument:
          type: object
          description: The DID document that was created for the DID
          items:
            $ref: '#/components/schemas/Dids.v1_DidDocument'
    Dids.v1_DidMetadataKey:
      type: object
      properties:
        kmsKeyId:
          type: string
          example: ad8facc7-e7f6-4af6-9baa-2f7abd71c928
        didDocumentKeyId:
          type: string
          example: 'did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH#z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH'
    Dids.v1_GetDidConfigJsonldResponse:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/VerifiableCredential'
    Dids.v1_GetDidResponse:
      type: object
      properties:
        didDocument:
          $ref: '#/components/schemas/Dids.v1_DidDocument'
        registrationStatus:
          type: string
        localMetadata:
          $ref: '#/components/schemas/Dids.v1_DidMetadata'
    Dids.v1_GetDidsResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          type: array
          items:
            type: object
            required:
              - did
              - localMetadata
            properties:
              did:
                type: string
                example: 'did:key:z6Mkt7bFYc4V2HdAxwhMtaY6cgJckYXwhYdPLJCcnVqzrkpr'
              localMetadata:
                $ref: '#/components/schemas/Dids.v1_DidMetadata'
    Oidc-issuer.v1_CreateOidcIssuerClientRequest:
      type: object
      properties:
        name:
          type: string
          description: Meaningful name for this Client
          example: OIDC Client for Wallet
        redirectUris:
          type: array
          items:
            type: string
            format: uri
          description: Redirection URI to which the response will be sent
          example:
            - 'https://example.com/callback'
        responseTypes:
          type: array
          items:
            type: string
          description: Determines the authorization processing flow
          example:
            - code
        grantTypes:
          type: array
          items:
            type: string
          description: OAuth Grant Type
          example:
            - authorization_code
        tokenEndpointAuthMethod:
          type: string
          description: OAuth Token Endpoint Authentication Method
          example: client_secret_post
        idTokenSignedResponseAlg:
          type: string
          description: 'Algorithm must match configured jwks, defaults to RS256'
          example: ES256
        applicationType:
          type: string
          example: web
      required:
        - name
        - redirectUris
    Oidc-issuer.v1_CreateOidcIssuerClientResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: Client id
              example: 6a860559-21a3-4b57-9a2b-aaea3ba4683d
            secret:
              type: string
              description: Client secret
              example: PiMkTfrEmPTKRFiPzjMFvYkYu.FwR.iZGFnC
        - $ref: '#/components/schemas/Oidc-issuer.v1_CreateOidcIssuerClientRequest'
    Oidc-issuer.v1_CreateOidcIssuerRequest:
      type: object
      properties:
        credential:
          type: object
          required:
            - issuerDid
            - name
            - context
            - type
          description: Credential information
          properties:
            issuerDid:
              type: string
              description: The Issuer DID
              example: 'did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5'
            name:
              type: string
              description: Meaningful name for the Credential
              example: University Attendance Credential
            context:
              type: array
              description: JSON-LD schema where the term is referenced
              example:
                - 'https://schema.org'
              items:
                type: string
                format: uri
            type:
              type: array
              description: The Credential Type
              example:
                - AlumniCredential
              items:
                type: string
        federatedProvider:
          type: object
          required:
            - url
            - clientId
            - clientSecret
          description: Federated OIDC Provider details
          properties:
            url:
              type: string
              format: uri
              description: Base url for provider well-known endpoint
              example: 'https://example-university.au.auth0.com'
            scope:
              type: array
              description: OIDC scope associated with claims in the provider
              example:
                - openid
                - profile
                - email
              items:
                type: string
            clientId:
              type: string
              description: Client ID configured in the provider
              example: vJ0SCKchr4XjC0xHNE8DkH6Pmlg2lkCN
            clientSecret:
              type: string
              description: Client secret configured in the provider
              example: QNwfa4Yi4Im9zy1u_15n7SzWKt-9G5cdH0r1bONRpUPfN-UIRaaXv_90z8V6-OjH
        claimMappings:
          type: array
          description: Map OpenID Connect terms to JSON-LD terms
          items:
            type: object
            required:
              - jsonLdTerm
              - oidcClaim
            properties:
              jsonLdTerm:
                type: string
                description: The credential claim name in JSON-LD terms
                example: alumniOf
              oidcClaim:
                type: string
                description: The credential claim name in OIDC terms
                example: alumni_of
      required:
        - credential
        - federatedProvider
        - claimMappings
    Oidc-issuer.v1_CreateOidcIssuerResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: Issuer id
              example: 983c0a86-204f-4431-9371-f5a22e506599
            federatedProvider:
              type: object
              properties:
                callbackUrl:
                  type: string
                  format: uri
                  description: URL where the authorization code gets sent
                  example: 'https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/federated/callback'
        - $ref: '#/components/schemas/Oidc-issuer.v1_CreateOidcIssuerRequest'
    Oidc-issuer.v1_GetOidcIssuerClientsResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          $ref: '#/components/schemas/Oidc-issuer.v1_CreateOidcIssuerClientResponse'
    Oidc-issuer.v1_GetOidcIssuersResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          $ref: '#/components/schemas/Oidc-issuer.v1_CreateOidcIssuerResponse'
    Oidc-issuer.v1_OpenIdConfiguration:
      type: object
      properties:
        authorization_endpoint:
          type: string
          format: uri
          example: 'https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/authorize'
        claims_parameter_supported:
          type: boolean
          example: true
        claims_supported:
          type: array
          items:
            type: string
          example:
            - sub
            - sid
            - auth_time
            - iss
        code_challenge_methods_supported:
          type: array
          items:
            type: string
          example:
            - S256
        end_session_endpoint:
          type: string
          format: uri
          example: 'https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/session/end'
        grant_types_supported:
          type: array
          items:
            type: string
          example:
            - implicit
            - authorization_code
            - refresh_token
        id_token_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - ES256
        issuer:
          type: string
          format: uri
          example: 'https://tenant.vii.mattr.global'
        jwks_uri:
          type: string
          format: uri
          example: 'https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/jwks'
        registration_endpoint:
          type: string
          format: uri
          example: 'https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/clients'
        request_object_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - RS256
            - PS256
            - ES256
            - EdDSA
        request_parameter_supported:
          type: boolean
          example: true
        request_uri_parameter_supported:
          type: boolean
          example: true
        require_request_uri_registration:
          type: boolean
          example: true
        response_modes_supported:
          type: array
          items:
            type: string
          example:
            - form_post
            - fragment
            - query
        response_types_supported:
          type: array
          items:
            type: string
          example:
            - code id_token
            - code
            - id_token
            - none
        scopes_supported:
          type: array
          items:
            type: string
          example:
            - openid
            - offline_access
        subject_types_supported:
          type: array
          items:
            type: string
          example:
            - public
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
          example:
            - none
            - client_secret_basic
            - client_secret_jwt
            - client_secret_post
            - private_key_jwt
        token_endpoint_auth_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - RS256
            - PS256
            - ES256
            - EdDSA
        token_endpoint:
          type: string
          format: uri
          example: 'https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/token'
        userinfo_endpoint:
          type: string
          format: uri
          example: 'https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/me'
        userinfo_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - ES256
        claim_types_supported:
          type: array
          items:
            type: string
          example:
            - normal
    Oidc-verifier.v1_CreateOidcVerifierClientRequest:
      type: object
      properties:
        name:
          type: string
          description: Meaningful name for this Client
          example: OIDC Client for the verifier
        redirectUris:
          type: array
          items:
            type: string
            format: uri
          description: Redirection URI to which the response will be sent
          example:
            - 'https://example.com/callback'
        responseTypes:
          type: array
          items:
            type: string
          description: Determines the authorization processing flow
          example:
            - code
        grantTypes:
          type: array
          items:
            type: string
          description: OAuth Grant Type
          example:
            - authorization_code
        tokenEndpointAuthMethod:
          type: string
          description: OAuth Token Endpoint Authentication Method
          example: client_secret_post
        idTokenSignedResponseAlg:
          type: string
          description: 'Algorithm must match configured jwks, defaults to RS256'
          example: ES256
        applicationType:
          type: string
          example: web
        logoUri:
          type: string
          format: uri
          description: The logo to display above the QR code
          example: 'https://example.com/logo.png'
      required:
        - name
        - redirectUris
    Oidc-verifier.v1_CreateOidcVerifierClientResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: Client id
              example: da9bb6e4-c9ae-4468-b6ac-72b90d6efd5d
            secret:
              type: string
              description: Client secret
              example: H2epdcmNJ46hXJo5opdzvhbZK9W2ZGPkQh.E
        - $ref: '#/components/schemas/Oidc-verifier.v1_CreateOidcVerifierClientRequest'
    Oidc-verifier.v1_CreateOidcVerifierRequest:
      type: object
      properties:
        verifierDid:
          type: string
          description: The Verifier DID
          example: 'did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq'
        presentationTemplateId:
          type: string
          format: uuid
          description: Presentation Template ID used to request certain credentials
          example: 364b6a1b-3600-4927-a6ac-4d66aa6bbac3
        claimMappings:
          type: array
          items:
            type: object
            required:
              - jsonLdFqn
              - oidcClaim
            properties:
              jsonLdFqn:
                type: string
                description: Fully qualified JSON-LD term
                example: 'http://schema.org/alumniOf'
              oidcClaim:
                type: string
                description: The credential claim name in OIDC terms
                example: alumni_of
          description: Map OpenID Connect terms to JSON-LD terms
      required:
        - verifierDid
        - presentationTemplateId
        - claimMappings
    Oidc-verifier.v1_CreateOidcVerifierResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: Verifier id
              example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
        - $ref: '#/components/schemas/Oidc-verifier.v1_CreateOidcVerifierRequest'
    Oidc-verifier.v1_GetOidcVerifierClientsResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          $ref: '#/components/schemas/Oidc-verifier.v1_CreateOidcVerifierClientResponse'
    Oidc-verifier.v1_GetOidcVerifiersResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          $ref: '#/components/schemas/Oidc-verifier.v1_CreateOidcVerifierResponse'
    Presentations.v1_CreatePresentationDidAuthTemplate:
      type: object
      title: DIDAuth
      properties:
        type:
          type: string
          description: DIDAuth
          example: DIDAuth
      required:
        - type
    Presentations.v1_CreatePresentationQueryByExample:
      type: object
      x-examples: {}
      title: QueryByExample
      properties:
        type:
          type: string
          example: QueryByExample
        credentialQuery:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            minProperties: 1
            properties:
              required:
                type: boolean
              reason:
                type: string
              example:
                type: array
                items:
                  type: object
                  properties:
                    '@context':
                      type: array
                      description: array of contexts
                      items: {}
                    type:
                      type: string
                    trustedIssuer:
                      type: array
                      description: array of trusted issuers
                      items:
                        type: object
                        properties:
                          required:
                            type: boolean
                          issuer:
                            type: string
                        required:
                          - required
                          - issuer
                  required:
                    - '@context'
                    - type
                    - trustedIssuer
            required:
              - required
              - example
      required:
        - type
        - credentialQuery
    Presentations.v1_CreatePresentationQueryByFrame:
      type: object
      title: QueryByFrame
      properties:
        type:
          type: string
        credentialQuery:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            properties:
              reason:
                type: string
              frame:
                type: object
                required:
                  - '@context'
                  - type
                  - credentialSubject
                properties:
                  '@context':
                    type: array
                    items:
                      type: object
                  type:
                    type: string
                    example: VerifiableCredential
                  credentialSubject:
                    type: object
                    required:
                      - '@explicit'
                      - educationalCredentialAwarded
                      - familyName
                    properties:
                      '@explicit':
                        type: boolean
                      educationalCredentialAwarded:
                        type: object
                      familyName:
                        type: object
              trustedIssuer:
                type: array
                uniqueItems: true
                minItems: 0
                items:
                  type: object
                  properties:
                    required:
                      type: boolean
                    issuer:
                      type: string
                  required:
                    - required
                    - issuer
            required:
              - reason
              - frame
              - trustedIssuer
      required:
        - type
        - credentialQuery
    Presentations.v1_CreatePresentationRequestRequest:
      type: object
      required:
        - templateId
        - did
      properties:
        challenge:
          type: string
          description: Challenge can be used to match the response to a request
          example: 64e45290-9980-11ea-b872-f1bee5fb328f
        did:
          type: string
          description: DID of the Verifier
          example: 'did:key:z6Mkt7bFYc4V2HdAxwhMtaY6cgJckYXwhYdPLJCcnVqzrkpr'
        templateId:
          type: string
          description: Presentation Request Template id
          example: 64e45290-9980-11ea-b872-f1bee5fb328f
        expiresTime:
          type: number
          description: Unix timestamp in ms after which the request will be expired
          example: 1592955632103
        callbackUrl:
          type: string
          format: uri
          description: Endpoint that will receive the Verifiable Presentation
          example: 'https://tenant.vii.mattr.global/core/v1/presentations/response'
    Presentations.v1_CreatePresentationRequestResponse:
      type: object
      properties:
        id:
          type: string
          description: Presentation Request id
          example: c74128a0-9949-11ea-9554-b5a630b3c119
        callbackUrl:
          type: string
          format: uri
          description: Endpoint that will receive the Verifiable Presentation
          example: 'https://tenant.vii.mattr.global/core/v1/presentations/response'
        request:
          type: object
          description: Presentation Request Details
          properties:
            id:
              type: string
              format: uuid
              description: Presentation Request id
              example: c74128a0-9949-11ea-9554-b5a630b3c119
            type:
              type: string
              format: uri
              description: Presentation Request schema
              example: 'https://mattr.global/schemas/verifiable-presentation/request/QueryByExample'
            from:
              type: string
              description: Verifier DID
              example: 'did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq'
            created_time:
              type: number
              description: Creation time
              example: 1606709582907
            expires_time:
              type: number
              description: Expiry time
              example: 2594859115000
            reply_url:
              type: string
              description: Endpoint that will receive the Verifiable Presentation
              example: 'https://tenant.vii.mattr.global/core/v1/presentations/response'
            reply_to:
              type: array
              description: Verifier DID
              items:
                type: string
                example: 'did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq'
            body:
              description: Definition of what type of Credential is being requested
              allOf:
                - $ref: '#/components/schemas/Presentations.v1_PresentationTemplateResponse'
                - type: object
                  properties:
                    challenge:
                      type: string
                      format: uuid
                      description: Challenge to match the response to a request
                      example: e1b35ae0-9e0e-11ea-9bbf-a387b27c9e60
    Presentations.v1_CreatePresentationTemplate:
      type: object
      title: PresentationTemplate
      description: ''
      properties:
        domain:
          type: string
          description: Must match domain of the tenant
        name:
          type: string
          description: Internal descriptor only
        query:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Presentations.v1_CreatePresentationQueryByExample'
              - $ref: '#/components/schemas/Presentations.v1_CreatePresentationQueryByFrame'
              - $ref: '#/components/schemas/Presentations.v1_CreatePresentationDidAuthTemplate'
      required:
        - domain
        - name
        - query
    Presentations.v1_PresentationTemplateArrayResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          type: array
          items:
            $ref: '#/components/schemas/Presentations.v1_PresentationTemplateResponse'
    Presentations.v1_PresentationTemplateResponse:
      type: object
      properties:
        id:
          type: string
          example: 64e45290-9980-11ea-b872-f1bee5fb328f
        domain:
          type: string
          example: tenant.vii.mattr.global
        name:
          type: string
          example: alumni_credential_request
        query:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Presentations.v1_CreatePresentationQueryByExample'
              - $ref: '#/components/schemas/Presentations.v1_CreatePresentationQueryByFrame'
              - $ref: '#/components/schemas/Presentations.v1_CreatePresentationDidAuthTemplate'
      required:
        - id
        - domain
        - name
        - query
    Presentations.v1_UpdatePresentationTemplate:
      title: UpdatePresentationTemplate
      allOf:
        - type: object
          properties:
            id:
              type: string
        - $ref: '#/components/schemas/Presentations.v1_CreatePresentationTemplate'
  parameters:
    Common_Cursor:
      schema:
        type: string
        example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
      in: query
      name: cursor
      description: Starting point for the list
    Common_Limit:
      schema:
        type: number
        example: 2
        maximum: 1000
        minimum: 1
        default: 100
      in: query
      name: limit
      description: 'Range size of the list, default 100'
    Id:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: 873277c0-a162-11ea-8a1d-a111119347e6
      description: Credential ID
    Did:
      name: id
      in: path
      description: Issuer ID
      schema:
        type: string
        format: uuid
        example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
      required: true
    IssuerId:
      name: id
      in: path
      description: Issuer ID
      schema:
        type: string
        format: uuid
        example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
      required: true
    VerifierId:
      name: id
      in: path
      required: true
      description: Verifier ID
      schema:
        type: string
        format: uuid
        example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
servers:
  - url: 'https://tenant.vii.mattr.global/core'
    variables:
      tenant-subdomain:
        default: tenant
        description: Demo Tenant